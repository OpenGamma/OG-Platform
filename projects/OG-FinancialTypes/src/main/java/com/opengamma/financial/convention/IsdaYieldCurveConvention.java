/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.convention;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.Period;

import com.opengamma.core.convention.ConventionType;
import com.opengamma.financial.convention.businessday.BusinessDayConvention;
import com.opengamma.financial.convention.daycount.DayCount;
import com.opengamma.id.ExternalId;
import com.opengamma.master.convention.ManageableConvention;
import com.opengamma.util.money.Currency;

/**
 * Specifies conventions relevant for an ISDA yield curve. Contains
 * curve-level and node-level conventions since all are considered 
 * to apply globally to the curve. 
 * 
 * Note that swap conventions apply only to the fixed leg. Equivalent
 * conventions for the float leg are ignored by the analytics so are
 * not specified.
 */
@BeanDefinition
public class IsdaYieldCurveConvention extends ManageableConvention {

  private static final long serialVersionUID = 1L;

  private static final ConventionType TYPE = ConventionType.of("ISDAYieldCurve");

  /**
   * The number of settlement days.
   */
  @PropertyDefinition(validate = "notNull")
  private int _settlementDays;

  /**
   * The currency.
   */
  @PropertyDefinition(validate = "notNull")
  private Currency _currency;

  /**
   * The business day convention.
   */
  @PropertyDefinition(validate = "notNull")
  private BusinessDayConvention _businessDayConvention;

  /**
   * The region calendar.
   * TODO SSM-293. Should use a link when one is available.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalId _regionCalendar;
  
  /**
   * Day count for curve.
   */
  @PropertyDefinition(validate = "notNull")
  private DayCount _curveDayCount;

  /**
   * Day count convention for cash nodes.
   */
  @PropertyDefinition(validate = "notNull")
  private DayCount _cashDayCount;
  
  /**
   * Day count convention for fixed leg swap nodes.
   */
  @PropertyDefinition(validate = "notNull")
  private DayCount _swapFixedLegDayCount;

  /**
   * Frequency of payments for fixed leg swap nodes.
   */
  @PropertyDefinition(validate = "notNull")
  private Period _swapFixedLegInterval;



  @Override
  public ConventionType getConventionType() {
    return TYPE;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IsdaYieldCurveConvention}.
   * @return the meta-bean, not null
   */
  public static IsdaYieldCurveConvention.Meta meta() {
    return IsdaYieldCurveConvention.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IsdaYieldCurveConvention.Meta.INSTANCE);
  }

  @Override
  public IsdaYieldCurveConvention.Meta metaBean() {
    return IsdaYieldCurveConvention.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the number of settlement days.
   * @return the value of the property, not null
   */
  public int getSettlementDays() {
    return _settlementDays;
  }

  /**
   * Sets the number of settlement days.
   * @param settlementDays  the new value of the property, not null
   */
  public void setSettlementDays(int settlementDays) {
    JodaBeanUtils.notNull(settlementDays, "settlementDays");
    this._settlementDays = settlementDays;
  }

  /**
   * Gets the the {@code settlementDays} property.
   * @return the property, not null
   */
  public final Property<Integer> settlementDays() {
    return metaBean().settlementDays().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return _currency;
  }

  /**
   * Sets the currency.
   * @param currency  the new value of the property, not null
   */
  public void setCurrency(Currency currency) {
    JodaBeanUtils.notNull(currency, "currency");
    this._currency = currency;
  }

  /**
   * Gets the the {@code currency} property.
   * @return the property, not null
   */
  public final Property<Currency> currency() {
    return metaBean().currency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the business day convention.
   * @return the value of the property, not null
   */
  public BusinessDayConvention getBusinessDayConvention() {
    return _businessDayConvention;
  }

  /**
   * Sets the business day convention.
   * @param businessDayConvention  the new value of the property, not null
   */
  public void setBusinessDayConvention(BusinessDayConvention businessDayConvention) {
    JodaBeanUtils.notNull(businessDayConvention, "businessDayConvention");
    this._businessDayConvention = businessDayConvention;
  }

  /**
   * Gets the the {@code businessDayConvention} property.
   * @return the property, not null
   */
  public final Property<BusinessDayConvention> businessDayConvention() {
    return metaBean().businessDayConvention().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the region calendar.
   * TODO SSM-293. Should use a link when one is available.
   * @return the value of the property, not null
   */
  public ExternalId getRegionCalendar() {
    return _regionCalendar;
  }

  /**
   * Sets the region calendar.
   * TODO SSM-293. Should use a link when one is available.
   * @param regionCalendar  the new value of the property, not null
   */
  public void setRegionCalendar(ExternalId regionCalendar) {
    JodaBeanUtils.notNull(regionCalendar, "regionCalendar");
    this._regionCalendar = regionCalendar;
  }

  /**
   * Gets the the {@code regionCalendar} property.
   * TODO SSM-293. Should use a link when one is available.
   * @return the property, not null
   */
  public final Property<ExternalId> regionCalendar() {
    return metaBean().regionCalendar().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets day count for curve.
   * @return the value of the property, not null
   */
  public DayCount getCurveDayCount() {
    return _curveDayCount;
  }

  /**
   * Sets day count for curve.
   * @param curveDayCount  the new value of the property, not null
   */
  public void setCurveDayCount(DayCount curveDayCount) {
    JodaBeanUtils.notNull(curveDayCount, "curveDayCount");
    this._curveDayCount = curveDayCount;
  }

  /**
   * Gets the the {@code curveDayCount} property.
   * @return the property, not null
   */
  public final Property<DayCount> curveDayCount() {
    return metaBean().curveDayCount().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets day count convention for cash nodes.
   * @return the value of the property, not null
   */
  public DayCount getCashDayCount() {
    return _cashDayCount;
  }

  /**
   * Sets day count convention for cash nodes.
   * @param cashDayCount  the new value of the property, not null
   */
  public void setCashDayCount(DayCount cashDayCount) {
    JodaBeanUtils.notNull(cashDayCount, "cashDayCount");
    this._cashDayCount = cashDayCount;
  }

  /**
   * Gets the the {@code cashDayCount} property.
   * @return the property, not null
   */
  public final Property<DayCount> cashDayCount() {
    return metaBean().cashDayCount().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets day count convention for fixed leg swap nodes.
   * @return the value of the property, not null
   */
  public DayCount getSwapFixedLegDayCount() {
    return _swapFixedLegDayCount;
  }

  /**
   * Sets day count convention for fixed leg swap nodes.
   * @param swapFixedLegDayCount  the new value of the property, not null
   */
  public void setSwapFixedLegDayCount(DayCount swapFixedLegDayCount) {
    JodaBeanUtils.notNull(swapFixedLegDayCount, "swapFixedLegDayCount");
    this._swapFixedLegDayCount = swapFixedLegDayCount;
  }

  /**
   * Gets the the {@code swapFixedLegDayCount} property.
   * @return the property, not null
   */
  public final Property<DayCount> swapFixedLegDayCount() {
    return metaBean().swapFixedLegDayCount().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets frequency of payments for fixed leg swap nodes.
   * @return the value of the property, not null
   */
  public Period getSwapFixedLegInterval() {
    return _swapFixedLegInterval;
  }

  /**
   * Sets frequency of payments for fixed leg swap nodes.
   * @param swapFixedLegInterval  the new value of the property, not null
   */
  public void setSwapFixedLegInterval(Period swapFixedLegInterval) {
    JodaBeanUtils.notNull(swapFixedLegInterval, "swapFixedLegInterval");
    this._swapFixedLegInterval = swapFixedLegInterval;
  }

  /**
   * Gets the the {@code swapFixedLegInterval} property.
   * @return the property, not null
   */
  public final Property<Period> swapFixedLegInterval() {
    return metaBean().swapFixedLegInterval().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public IsdaYieldCurveConvention clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IsdaYieldCurveConvention other = (IsdaYieldCurveConvention) obj;
      return (getSettlementDays() == other.getSettlementDays()) &&
          JodaBeanUtils.equal(getCurrency(), other.getCurrency()) &&
          JodaBeanUtils.equal(getBusinessDayConvention(), other.getBusinessDayConvention()) &&
          JodaBeanUtils.equal(getRegionCalendar(), other.getRegionCalendar()) &&
          JodaBeanUtils.equal(getCurveDayCount(), other.getCurveDayCount()) &&
          JodaBeanUtils.equal(getCashDayCount(), other.getCashDayCount()) &&
          JodaBeanUtils.equal(getSwapFixedLegDayCount(), other.getSwapFixedLegDayCount()) &&
          JodaBeanUtils.equal(getSwapFixedLegInterval(), other.getSwapFixedLegInterval()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getSettlementDays());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurrency());
    hash += hash * 31 + JodaBeanUtils.hashCode(getBusinessDayConvention());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRegionCalendar());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurveDayCount());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCashDayCount());
    hash += hash * 31 + JodaBeanUtils.hashCode(getSwapFixedLegDayCount());
    hash += hash * 31 + JodaBeanUtils.hashCode(getSwapFixedLegInterval());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(288);
    buf.append("IsdaYieldCurveConvention{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("settlementDays").append('=').append(JodaBeanUtils.toString(getSettlementDays())).append(',').append(' ');
    buf.append("currency").append('=').append(JodaBeanUtils.toString(getCurrency())).append(',').append(' ');
    buf.append("businessDayConvention").append('=').append(JodaBeanUtils.toString(getBusinessDayConvention())).append(',').append(' ');
    buf.append("regionCalendar").append('=').append(JodaBeanUtils.toString(getRegionCalendar())).append(',').append(' ');
    buf.append("curveDayCount").append('=').append(JodaBeanUtils.toString(getCurveDayCount())).append(',').append(' ');
    buf.append("cashDayCount").append('=').append(JodaBeanUtils.toString(getCashDayCount())).append(',').append(' ');
    buf.append("swapFixedLegDayCount").append('=').append(JodaBeanUtils.toString(getSwapFixedLegDayCount())).append(',').append(' ');
    buf.append("swapFixedLegInterval").append('=').append(JodaBeanUtils.toString(getSwapFixedLegInterval())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IsdaYieldCurveConvention}.
   */
  public static class Meta extends ManageableConvention.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code settlementDays} property.
     */
    private final MetaProperty<Integer> _settlementDays = DirectMetaProperty.ofReadWrite(
        this, "settlementDays", IsdaYieldCurveConvention.class, Integer.TYPE);
    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> _currency = DirectMetaProperty.ofReadWrite(
        this, "currency", IsdaYieldCurveConvention.class, Currency.class);
    /**
     * The meta-property for the {@code businessDayConvention} property.
     */
    private final MetaProperty<BusinessDayConvention> _businessDayConvention = DirectMetaProperty.ofReadWrite(
        this, "businessDayConvention", IsdaYieldCurveConvention.class, BusinessDayConvention.class);
    /**
     * The meta-property for the {@code regionCalendar} property.
     */
    private final MetaProperty<ExternalId> _regionCalendar = DirectMetaProperty.ofReadWrite(
        this, "regionCalendar", IsdaYieldCurveConvention.class, ExternalId.class);
    /**
     * The meta-property for the {@code curveDayCount} property.
     */
    private final MetaProperty<DayCount> _curveDayCount = DirectMetaProperty.ofReadWrite(
        this, "curveDayCount", IsdaYieldCurveConvention.class, DayCount.class);
    /**
     * The meta-property for the {@code cashDayCount} property.
     */
    private final MetaProperty<DayCount> _cashDayCount = DirectMetaProperty.ofReadWrite(
        this, "cashDayCount", IsdaYieldCurveConvention.class, DayCount.class);
    /**
     * The meta-property for the {@code swapFixedLegDayCount} property.
     */
    private final MetaProperty<DayCount> _swapFixedLegDayCount = DirectMetaProperty.ofReadWrite(
        this, "swapFixedLegDayCount", IsdaYieldCurveConvention.class, DayCount.class);
    /**
     * The meta-property for the {@code swapFixedLegInterval} property.
     */
    private final MetaProperty<Period> _swapFixedLegInterval = DirectMetaProperty.ofReadWrite(
        this, "swapFixedLegInterval", IsdaYieldCurveConvention.class, Period.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "settlementDays",
        "currency",
        "businessDayConvention",
        "regionCalendar",
        "curveDayCount",
        "cashDayCount",
        "swapFixedLegDayCount",
        "swapFixedLegInterval");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -295948000:  // settlementDays
          return _settlementDays;
        case 575402001:  // currency
          return _currency;
        case -1002835891:  // businessDayConvention
          return _businessDayConvention;
        case 1932874322:  // regionCalendar
          return _regionCalendar;
        case -1661418270:  // curveDayCount
          return _curveDayCount;
        case -762266842:  // cashDayCount
          return _cashDayCount;
        case -1556154720:  // swapFixedLegDayCount
          return _swapFixedLegDayCount;
        case 1403919506:  // swapFixedLegInterval
          return _swapFixedLegInterval;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IsdaYieldCurveConvention> builder() {
      return new DirectBeanBuilder<IsdaYieldCurveConvention>(new IsdaYieldCurveConvention());
    }

    @Override
    public Class<? extends IsdaYieldCurveConvention> beanType() {
      return IsdaYieldCurveConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code settlementDays} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> settlementDays() {
      return _settlementDays;
    }

    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> currency() {
      return _currency;
    }

    /**
     * The meta-property for the {@code businessDayConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<BusinessDayConvention> businessDayConvention() {
      return _businessDayConvention;
    }

    /**
     * The meta-property for the {@code regionCalendar} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> regionCalendar() {
      return _regionCalendar;
    }

    /**
     * The meta-property for the {@code curveDayCount} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DayCount> curveDayCount() {
      return _curveDayCount;
    }

    /**
     * The meta-property for the {@code cashDayCount} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DayCount> cashDayCount() {
      return _cashDayCount;
    }

    /**
     * The meta-property for the {@code swapFixedLegDayCount} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DayCount> swapFixedLegDayCount() {
      return _swapFixedLegDayCount;
    }

    /**
     * The meta-property for the {@code swapFixedLegInterval} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Period> swapFixedLegInterval() {
      return _swapFixedLegInterval;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -295948000:  // settlementDays
          return ((IsdaYieldCurveConvention) bean).getSettlementDays();
        case 575402001:  // currency
          return ((IsdaYieldCurveConvention) bean).getCurrency();
        case -1002835891:  // businessDayConvention
          return ((IsdaYieldCurveConvention) bean).getBusinessDayConvention();
        case 1932874322:  // regionCalendar
          return ((IsdaYieldCurveConvention) bean).getRegionCalendar();
        case -1661418270:  // curveDayCount
          return ((IsdaYieldCurveConvention) bean).getCurveDayCount();
        case -762266842:  // cashDayCount
          return ((IsdaYieldCurveConvention) bean).getCashDayCount();
        case -1556154720:  // swapFixedLegDayCount
          return ((IsdaYieldCurveConvention) bean).getSwapFixedLegDayCount();
        case 1403919506:  // swapFixedLegInterval
          return ((IsdaYieldCurveConvention) bean).getSwapFixedLegInterval();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -295948000:  // settlementDays
          ((IsdaYieldCurveConvention) bean).setSettlementDays((Integer) newValue);
          return;
        case 575402001:  // currency
          ((IsdaYieldCurveConvention) bean).setCurrency((Currency) newValue);
          return;
        case -1002835891:  // businessDayConvention
          ((IsdaYieldCurveConvention) bean).setBusinessDayConvention((BusinessDayConvention) newValue);
          return;
        case 1932874322:  // regionCalendar
          ((IsdaYieldCurveConvention) bean).setRegionCalendar((ExternalId) newValue);
          return;
        case -1661418270:  // curveDayCount
          ((IsdaYieldCurveConvention) bean).setCurveDayCount((DayCount) newValue);
          return;
        case -762266842:  // cashDayCount
          ((IsdaYieldCurveConvention) bean).setCashDayCount((DayCount) newValue);
          return;
        case -1556154720:  // swapFixedLegDayCount
          ((IsdaYieldCurveConvention) bean).setSwapFixedLegDayCount((DayCount) newValue);
          return;
        case 1403919506:  // swapFixedLegInterval
          ((IsdaYieldCurveConvention) bean).setSwapFixedLegInterval((Period) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._settlementDays, "settlementDays");
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._currency, "currency");
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._businessDayConvention, "businessDayConvention");
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._regionCalendar, "regionCalendar");
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._curveDayCount, "curveDayCount");
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._cashDayCount, "cashDayCount");
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._swapFixedLegDayCount, "swapFixedLegDayCount");
      JodaBeanUtils.notNull(((IsdaYieldCurveConvention) bean)._swapFixedLegInterval, "swapFixedLegInterval");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

/*
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.financial.security.irs;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;

import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.financial.security.swap.SwapLegVisitor;

/**
 * Abstract base class for a leg in a swap.
 */
@BeanDefinition
public abstract class InterestRateSwapLeg extends DirectBean {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  // would be nice to allow a plain InterestRateNotional (but cant get the visitor to work out)
  /**
   * The notional.
   */
  @PropertyDefinition
  private InterestRateSwapNotional _notional;

  /**
   * Whether this is a pay or receive leg
   */
  @PropertyDefinition(validate = "notNull")
  private PayReceiveType _payReceiveType;

  /**
   * Accepts a visitor to manage traversal of the hierarchy.
   *
   * @param <T> the result type of the visitor
   * @param visitor  the visitor, not null
   * @return the result
   */
  public abstract <T> T accept(InterestRateSwapLegVisitor<T> visitor);

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InterestRateSwapLeg}.
   * @return the meta-bean, not null
   */
  public static InterestRateSwapLeg.Meta meta() {
    return InterestRateSwapLeg.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InterestRateSwapLeg.Meta.INSTANCE);
  }

  @Override
  public InterestRateSwapLeg.Meta metaBean() {
    return InterestRateSwapLeg.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the notional.
   * @return the value of the property
   */
  public InterestRateSwapNotional getNotional() {
    return _notional;
  }

  /**
   * Sets the notional.
   * @param notional  the new value of the property
   */
  public void setNotional(InterestRateSwapNotional notional) {
    this._notional = notional;
  }

  /**
   * Gets the the {@code notional} property.
   * @return the property, not null
   */
  public final Property<InterestRateSwapNotional> notional() {
    return metaBean().notional().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets whether this is a pay or receive leg
   * @return the value of the property, not null
   */
  public PayReceiveType getPayReceiveType() {
    return _payReceiveType;
  }

  /**
   * Sets whether this is a pay or receive leg
   * @param payReceiveType  the new value of the property, not null
   */
  public void setPayReceiveType(PayReceiveType payReceiveType) {
    JodaBeanUtils.notNull(payReceiveType, "payReceiveType");
    this._payReceiveType = payReceiveType;
  }

  /**
   * Gets the the {@code payReceiveType} property.
   * @return the property, not null
   */
  public final Property<PayReceiveType> payReceiveType() {
    return metaBean().payReceiveType().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public InterestRateSwapLeg clone() {
    BeanBuilder<? extends InterestRateSwapLeg> builder = metaBean().builder();
    for (MetaProperty<?> mp : metaBean().metaPropertyIterable()) {
      if (mp.style().isBuildable()) {
        Object value = mp.get(this);
        if (value instanceof Bean) {
          value = ((Bean) value).clone();
        }
        builder.set(mp.name(), value);
      }
    }
    return builder.build();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InterestRateSwapLeg other = (InterestRateSwapLeg) obj;
      return JodaBeanUtils.equal(getNotional(), other.getNotional()) &&
          JodaBeanUtils.equal(getPayReceiveType(), other.getPayReceiveType());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getNotional());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPayReceiveType());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("InterestRateSwapLeg{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("notional").append('=').append(JodaBeanUtils.toString(getNotional())).append(',').append(' ');
    buf.append("payReceiveType").append('=').append(JodaBeanUtils.toString(getPayReceiveType())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InterestRateSwapLeg}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code notional} property.
     */
    private final MetaProperty<InterestRateSwapNotional> _notional = DirectMetaProperty.ofReadWrite(
        this, "notional", InterestRateSwapLeg.class, InterestRateSwapNotional.class);
    /**
     * The meta-property for the {@code payReceiveType} property.
     */
    private final MetaProperty<PayReceiveType> _payReceiveType = DirectMetaProperty.ofReadWrite(
        this, "payReceiveType", InterestRateSwapLeg.class, PayReceiveType.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "notional",
        "payReceiveType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1585636160:  // notional
          return _notional;
        case -1179727115:  // payReceiveType
          return _payReceiveType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends InterestRateSwapLeg> builder() {
      throw new UnsupportedOperationException("InterestRateSwapLeg is an abstract class");
    }

    @Override
    public Class<? extends InterestRateSwapLeg> beanType() {
      return InterestRateSwapLeg.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code notional} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<InterestRateSwapNotional> notional() {
      return _notional;
    }

    /**
     * The meta-property for the {@code payReceiveType} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<PayReceiveType> payReceiveType() {
      return _payReceiveType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1585636160:  // notional
          return ((InterestRateSwapLeg) bean).getNotional();
        case -1179727115:  // payReceiveType
          return ((InterestRateSwapLeg) bean).getPayReceiveType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1585636160:  // notional
          ((InterestRateSwapLeg) bean).setNotional((InterestRateSwapNotional) newValue);
          return;
        case -1179727115:  // payReceiveType
          ((InterestRateSwapLeg) bean).setPayReceiveType((PayReceiveType) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((InterestRateSwapLeg) bean)._payReceiveType, "payReceiveType");
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

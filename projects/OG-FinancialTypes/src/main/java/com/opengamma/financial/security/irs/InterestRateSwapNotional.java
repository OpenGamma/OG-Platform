/*
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */

package com.opengamma.financial.security.irs;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;

import com.opengamma.financial.security.swap.InterestRateNotional;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.money.Currency;

import java.util.Arrays;
import java.util.Map;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.Bean;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectMetaProperty;

/**
 * Notional that can handle a schedule. Currency must be constant throughout.
 * Expects to be handed a list of dates and the notional (absolute or delta) taking effect in that period.
 * Can be passed a single amount for a constant notional.
 */
@BeanDefinition
public final class InterestRateSwapNotional extends InterestRateNotional {

  /**
   * The periods for which custom notionals are required.
   */
  @PropertyDefinition
  private int[] _overridePeriods;

  /**
   * The custom notionals. Possible this should be delta's on top of first notional.
   */
  @PropertyDefinition
  private double[] _notionals;

  /**
   * Controls if the custom notionals are delta on the original or absolute values.
   */
  @PropertyDefinition
  private Rate.ShiftType[] _shiftTypes;

  //@Override
  public <T> T accept(InterestRateSwapNotionalVisitor<Integer, T> visitor, Integer period) {
    return visitor.visitInterestRateSwapNotional(this, period);
  }

  //@Override
  public <T> T accept(InterestRateSwapNotionalVisitor<Object , T> visitor) {
    return visitor.visitInterestRateSwapNotional(this);
  }

  @Override
  public double getAmount() {
    if (_overridePeriods.length == 0) {
      return super.getAmount();
    }
    throw new UnsupportedOperationException("Need the period to return the notional for in the schedule: " + this);
  }

  public double getInitialAmount() {
    return getAmount(0);
  }

  public double getAmount(final int date) {
    if (_notionals.length == 0) {
      return super.getAmount();
    }
    final int index = Arrays.binarySearch(_overridePeriods, date);
    if (index >= 0) {
      final int previousIndex = Math.max(0, index - 1);
      return _shiftTypes[index].getRate(getAmount(previousIndex), _notionals[index]);
    } else {
      // if value not explicitly set for this period, take from previous period with a value.
      //TODO: Explicitly work out amount here - avoid 2nd binary search.
      return getAmount(-(index + 2));
    }
  }

  public static InterestRateSwapNotional of(Currency ccy, final int[] dates, final double[] notionals, Rate.ShiftType[] types) {
    return new InterestRateSwapNotional(ccy, dates, notionals, types);
  }

  public InterestRateSwapNotional(Currency ccy, int[] overridePeriods, double[] notionals, Rate.ShiftType[] types) {
    super(ccy, 0.0); // could store 1st notional but never accessed anyway
    ArgumentChecker.isTrue(overridePeriods.length == notionals.length, "Different overrides & notionals");
    ArgumentChecker.isTrue(overridePeriods.length == types.length, "Different overrides & adjustment types");
    _overridePeriods = overridePeriods;
    _notionals = notionals;
    _shiftTypes = types;
  }

  //private InterestRateSwapNotional() {
  //  super();
  //  _overridePeriods = new int[0];
  //  _notionals = new double[0];
  //  _shiftTypes = new Rate.ShiftType[0];
  //}

  public InterestRateSwapNotional(final Currency ccy, final double amount) {
    super(ccy, amount);
    _overridePeriods = new int[0];
    _notionals = new double[0];
    _shiftTypes = new Rate.ShiftType[0];
  }

  protected InterestRateSwapNotional() {
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InterestRateSwapNotional}.
   * @return the meta-bean, not null
   */
  public static InterestRateSwapNotional.Meta meta() {
    return InterestRateSwapNotional.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InterestRateSwapNotional.Meta.INSTANCE);
  }

  @Override
  public InterestRateSwapNotional.Meta metaBean() {
    return InterestRateSwapNotional.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the periods for which custom notionals are required.
   * @return the value of the property
   */
  public int[] getOverridePeriods() {
    return (_overridePeriods != null ? _overridePeriods.clone() : null);
  }

  /**
   * Sets the periods for which custom notionals are required.
   * @param overridePeriods  the new value of the property
   */
  public void setOverridePeriods(int[] overridePeriods) {
    this._overridePeriods = overridePeriods;
  }

  /**
   * Gets the the {@code overridePeriods} property.
   * @return the property, not null
   */
  public Property<int[]> overridePeriods() {
    return metaBean().overridePeriods().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the custom notionals. Possible this should be delta's on top of first notional.
   * @return the value of the property
   */
  public double[] getNotionals() {
    return (_notionals != null ? _notionals.clone() : null);
  }

  /**
   * Sets the custom notionals. Possible this should be delta's on top of first notional.
   * @param notionals  the new value of the property
   */
  public void setNotionals(double[] notionals) {
    this._notionals = notionals;
  }

  /**
   * Gets the the {@code notionals} property.
   * @return the property, not null
   */
  public Property<double[]> notionals() {
    return metaBean().notionals().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets controls if the custom notionals are delta on the original or absolute values.
   * @return the value of the property
   */
  public Rate.ShiftType[] getShiftTypes() {
    return _shiftTypes;
  }

  /**
   * Sets controls if the custom notionals are delta on the original or absolute values.
   * @param shiftTypes  the new value of the property
   */
  public void setShiftTypes(Rate.ShiftType[] shiftTypes) {
    this._shiftTypes = shiftTypes;
  }

  /**
   * Gets the the {@code shiftTypes} property.
   * @return the property, not null
   */
  public Property<Rate.ShiftType[]> shiftTypes() {
    return metaBean().shiftTypes().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public InterestRateSwapNotional clone() {
    return (InterestRateSwapNotional) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InterestRateSwapNotional other = (InterestRateSwapNotional) obj;
      return JodaBeanUtils.equal(getOverridePeriods(), other.getOverridePeriods()) &&
          JodaBeanUtils.equal(getNotionals(), other.getNotionals()) &&
          JodaBeanUtils.equal(getShiftTypes(), other.getShiftTypes()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getOverridePeriods());
    hash += hash * 31 + JodaBeanUtils.hashCode(getNotionals());
    hash += hash * 31 + JodaBeanUtils.hashCode(getShiftTypes());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("InterestRateSwapNotional{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("overridePeriods").append('=').append(JodaBeanUtils.toString(getOverridePeriods())).append(',').append(' ');
    buf.append("notionals").append('=').append(JodaBeanUtils.toString(getNotionals())).append(',').append(' ');
    buf.append("shiftTypes").append('=').append(JodaBeanUtils.toString(getShiftTypes())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InterestRateSwapNotional}.
   */
  public static final class Meta extends InterestRateNotional.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code overridePeriods} property.
     */
    private final MetaProperty<int[]> _overridePeriods = DirectMetaProperty.ofReadWrite(
        this, "overridePeriods", InterestRateSwapNotional.class, int[].class);
    /**
     * The meta-property for the {@code notionals} property.
     */
    private final MetaProperty<double[]> _notionals = DirectMetaProperty.ofReadWrite(
        this, "notionals", InterestRateSwapNotional.class, double[].class);
    /**
     * The meta-property for the {@code shiftTypes} property.
     */
    private final MetaProperty<Rate.ShiftType[]> _shiftTypes = DirectMetaProperty.ofReadWrite(
        this, "shiftTypes", InterestRateSwapNotional.class, Rate.ShiftType[].class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "overridePeriods",
        "notionals",
        "shiftTypes");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 980951398:  // overridePeriods
          return _overridePeriods;
        case 1910080819:  // notionals
          return _notionals;
        case 1923906839:  // shiftTypes
          return _shiftTypes;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends InterestRateSwapNotional> builder() {
      return new DirectBeanBuilder<InterestRateSwapNotional>(new InterestRateSwapNotional());
    }

    @Override
    public Class<? extends InterestRateSwapNotional> beanType() {
      return InterestRateSwapNotional.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code overridePeriods} property.
     * @return the meta-property, not null
     */
    public MetaProperty<int[]> overridePeriods() {
      return _overridePeriods;
    }

    /**
     * The meta-property for the {@code notionals} property.
     * @return the meta-property, not null
     */
    public MetaProperty<double[]> notionals() {
      return _notionals;
    }

    /**
     * The meta-property for the {@code shiftTypes} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Rate.ShiftType[]> shiftTypes() {
      return _shiftTypes;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 980951398:  // overridePeriods
          return ((InterestRateSwapNotional) bean).getOverridePeriods();
        case 1910080819:  // notionals
          return ((InterestRateSwapNotional) bean).getNotionals();
        case 1923906839:  // shiftTypes
          return ((InterestRateSwapNotional) bean).getShiftTypes();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 980951398:  // overridePeriods
          ((InterestRateSwapNotional) bean).setOverridePeriods((int[]) newValue);
          return;
        case 1910080819:  // notionals
          ((InterestRateSwapNotional) bean).setNotionals((double[]) newValue);
          return;
        case 1923906839:  // shiftTypes
          ((InterestRateSwapNotional) bean).setShiftTypes((Rate.ShiftType[]) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

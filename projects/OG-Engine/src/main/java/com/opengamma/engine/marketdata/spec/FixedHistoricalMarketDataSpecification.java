/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.engine.marketdata.spec;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import org.threeten.bp.LocalDate;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * 
 */
@BeanDefinition
public class FixedHistoricalMarketDataSpecification extends HistoricalMarketDataSpecification implements MarketDataSpecification {
 
  private static final long serialVersionUID = 1L;
  
  @PropertyDefinition(validate = "notNull")
  private LocalDate _snapshotDate;
  
  /**
   * Constructors for builders
   */
  public FixedHistoricalMarketDataSpecification() {
  }
  
  /**
   * Creates an instance with a snapshotDate
   * 
   * @param snapshotDate the snapshot date, not null
   */
  public FixedHistoricalMarketDataSpecification(LocalDate snapshotDate) {
    super();
    setSnapshotDate(snapshotDate);
  }
  
  
  /**
   * Creates an instance with a timeSeriesResolverKey and snapshotDate
   * 
   * @param timeSeriesResolverKey the timeseries resolver key, not null
   * @param snapshotDate the snapshot date, not null
   */
  public FixedHistoricalMarketDataSpecification(String timeSeriesResolverKey, LocalDate snapshotDate) {
    super(timeSeriesResolverKey);
    setSnapshotDate(snapshotDate);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FixedHistoricalMarketDataSpecification}.
   * @return the meta-bean, not null
   */
  public static FixedHistoricalMarketDataSpecification.Meta meta() {
    return FixedHistoricalMarketDataSpecification.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FixedHistoricalMarketDataSpecification.Meta.INSTANCE);
  }

  @Override
  public FixedHistoricalMarketDataSpecification.Meta metaBean() {
    return FixedHistoricalMarketDataSpecification.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the snapshotDate.
   * @return the value of the property, not null
   */
  public LocalDate getSnapshotDate() {
    return _snapshotDate;
  }

  /**
   * Sets the snapshotDate.
   * @param snapshotDate  the new value of the property, not null
   */
  public void setSnapshotDate(LocalDate snapshotDate) {
    JodaBeanUtils.notNull(snapshotDate, "snapshotDate");
    this._snapshotDate = snapshotDate;
  }

  /**
   * Gets the the {@code snapshotDate} property.
   * @return the property, not null
   */
  public final Property<LocalDate> snapshotDate() {
    return metaBean().snapshotDate().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public FixedHistoricalMarketDataSpecification clone() {
    return (FixedHistoricalMarketDataSpecification) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FixedHistoricalMarketDataSpecification other = (FixedHistoricalMarketDataSpecification) obj;
      return JodaBeanUtils.equal(getSnapshotDate(), other.getSnapshotDate()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getSnapshotDate());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("FixedHistoricalMarketDataSpecification{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("snapshotDate").append('=').append(JodaBeanUtils.toString(getSnapshotDate())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FixedHistoricalMarketDataSpecification}.
   */
  public static class Meta extends HistoricalMarketDataSpecification.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code snapshotDate} property.
     */
    private final MetaProperty<LocalDate> _snapshotDate = DirectMetaProperty.ofReadWrite(
        this, "snapshotDate", FixedHistoricalMarketDataSpecification.class, LocalDate.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "snapshotDate");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -932005998:  // snapshotDate
          return _snapshotDate;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FixedHistoricalMarketDataSpecification> builder() {
      return new DirectBeanBuilder<FixedHistoricalMarketDataSpecification>(new FixedHistoricalMarketDataSpecification());
    }

    @Override
    public Class<? extends FixedHistoricalMarketDataSpecification> beanType() {
      return FixedHistoricalMarketDataSpecification.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code snapshotDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> snapshotDate() {
      return _snapshotDate;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -932005998:  // snapshotDate
          return ((FixedHistoricalMarketDataSpecification) bean).getSnapshotDate();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -932005998:  // snapshotDate
          ((FixedHistoricalMarketDataSpecification) bean).setSnapshotDate((LocalDate) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((FixedHistoricalMarketDataSpecification) bean)._snapshotDate, "snapshotDate");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

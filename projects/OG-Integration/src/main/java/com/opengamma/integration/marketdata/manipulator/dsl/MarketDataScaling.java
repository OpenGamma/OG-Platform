/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.marketdata.manipulator.dsl;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.engine.function.FunctionExecutionContext;
import com.opengamma.engine.marketdata.manipulator.function.StructureManipulator;
import com.opengamma.engine.value.ValueSpecification;

/**
 * Manipulator that scales a single market data value.
 */
@BeanDefinition
public class MarketDataScaling implements StructureManipulator<Double>, ImmutableBean {

  /** Scaling factor applied to the market data value. */
  @PropertyDefinition
  private final double _scalingFactor;

  @ImmutableConstructor
  /* package */ MarketDataScaling(double scalingFactor) {
    if (Double.isInfinite(scalingFactor) || Double.isNaN(scalingFactor)) {
      throw new IllegalArgumentException("scalingFactor must not be infinite or NaN. value=" + scalingFactor);
    }
    _scalingFactor = scalingFactor;
  }

  @Override
  public Double execute(Double structure, ValueSpecification valueSpecification, FunctionExecutionContext executionContext) {
    return structure * _scalingFactor;
  }

  @Override
  public Class<Double> getExpectedType() {
    return Double.class;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MarketDataScaling}.
   * @return the meta-bean, not null
   */
  public static MarketDataScaling.Meta meta() {
    return MarketDataScaling.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(MarketDataScaling.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static MarketDataScaling.Builder builder() {
    return new MarketDataScaling.Builder();
  }

  @Override
  public MarketDataScaling.Meta metaBean() {
    return MarketDataScaling.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets scaling factor applied to the market data value.
   * @return the value of the property
   */
  public double getScalingFactor() {
    return _scalingFactor;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public MarketDataScaling clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MarketDataScaling other = (MarketDataScaling) obj;
      return JodaBeanUtils.equal(getScalingFactor(), other.getScalingFactor());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getScalingFactor());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("MarketDataScaling{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("scalingFactor").append('=').append(JodaBeanUtils.toString(getScalingFactor())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MarketDataScaling}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code scalingFactor} property.
     */
    private final MetaProperty<Double> _scalingFactor = DirectMetaProperty.ofImmutable(
        this, "scalingFactor", MarketDataScaling.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "scalingFactor");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -794828874:  // scalingFactor
          return _scalingFactor;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public MarketDataScaling.Builder builder() {
      return new MarketDataScaling.Builder();
    }

    @Override
    public Class<? extends MarketDataScaling> beanType() {
      return MarketDataScaling.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code scalingFactor} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> scalingFactor() {
      return _scalingFactor;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -794828874:  // scalingFactor
          return ((MarketDataScaling) bean).getScalingFactor();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code MarketDataScaling}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<MarketDataScaling> {

    private double _scalingFactor;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(MarketDataScaling beanToCopy) {
      this._scalingFactor = beanToCopy.getScalingFactor();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -794828874:  // scalingFactor
          return _scalingFactor;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -794828874:  // scalingFactor
          this._scalingFactor = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public MarketDataScaling build() {
      return new MarketDataScaling(
          _scalingFactor);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code scalingFactor} property in the builder.
     * @param scalingFactor  the new value
     * @return this, for chaining, not null
     */
    public Builder scalingFactor(double scalingFactor) {
      this._scalingFactor = scalingFactor;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("MarketDataScaling.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("scalingFactor").append('=').append(JodaBeanUtils.toString(_scalingFactor)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

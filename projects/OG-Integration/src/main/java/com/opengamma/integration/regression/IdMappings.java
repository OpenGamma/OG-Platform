/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.regression;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.id.ObjectId;

/**
 *
 */
@BeanDefinition
public final class IdMappings implements ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<ObjectId, Integer> _ids;

  @PropertyDefinition
  private final int _maxId;

  @ImmutableConstructor
  public IdMappings(Map<ObjectId, Integer> ids, int maxId) {
    JodaBeanUtils.notNull(ids, "ids");
    this._ids = ImmutableMap.copyOf(ids);
    this._maxId = maxId;
  }

  public IdMappings() {
    this(Collections.<ObjectId, Integer>emptyMap(), -1);
  }

  public Integer getId(ObjectId objectId) {
    return _ids.get(objectId);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IdMappings}.
   * @return the meta-bean, not null
   */
  public static IdMappings.Meta meta() {
    return IdMappings.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IdMappings.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IdMappings.Builder builder() {
    return new IdMappings.Builder();
  }

  @Override
  public IdMappings.Meta metaBean() {
    return IdMappings.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the ids.
   * @return the value of the property, not null
   */
  public ImmutableMap<ObjectId, Integer> getIds() {
    return _ids;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the maxId.
   * @return the value of the property
   */
  public int getMaxId() {
    return _maxId;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public IdMappings clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IdMappings other = (IdMappings) obj;
      return JodaBeanUtils.equal(getIds(), other.getIds()) &&
          (getMaxId() == other.getMaxId());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getIds());
    hash += hash * 31 + JodaBeanUtils.hashCode(getMaxId());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("IdMappings{");
    buf.append("ids").append('=').append(getIds()).append(',').append(' ');
    buf.append("maxId").append('=').append(JodaBeanUtils.toString(getMaxId()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IdMappings}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code ids} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<ObjectId, Integer>> _ids = DirectMetaProperty.ofImmutable(
        this, "ids", IdMappings.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code maxId} property.
     */
    private final MetaProperty<Integer> _maxId = DirectMetaProperty.ofImmutable(
        this, "maxId", IdMappings.class, Integer.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "ids",
        "maxId");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 104120:  // ids
          return _ids;
        case 103671199:  // maxId
          return _maxId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IdMappings.Builder builder() {
      return new IdMappings.Builder();
    }

    @Override
    public Class<? extends IdMappings> beanType() {
      return IdMappings.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code ids} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<ObjectId, Integer>> ids() {
      return _ids;
    }

    /**
     * The meta-property for the {@code maxId} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> maxId() {
      return _maxId;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 104120:  // ids
          return ((IdMappings) bean).getIds();
        case 103671199:  // maxId
          return ((IdMappings) bean).getMaxId();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IdMappings}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<IdMappings> {

    private Map<ObjectId, Integer> _ids = new HashMap<ObjectId, Integer>();
    private int _maxId;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(IdMappings beanToCopy) {
      this._ids = new HashMap<ObjectId, Integer>(beanToCopy.getIds());
      this._maxId = beanToCopy.getMaxId();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 104120:  // ids
          return _ids;
        case 103671199:  // maxId
          return _maxId;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 104120:  // ids
          this._ids = (Map<ObjectId, Integer>) newValue;
          break;
        case 103671199:  // maxId
          this._maxId = (Integer) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IdMappings build() {
      return new IdMappings(
          _ids,
          _maxId);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code ids} property in the builder.
     * @param ids  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder ids(Map<ObjectId, Integer> ids) {
      JodaBeanUtils.notNull(ids, "ids");
      this._ids = ids;
      return this;
    }

    /**
     * Sets the {@code maxId} property in the builder.
     * @param maxId  the new value
     * @return this, for chaining, not null
     */
    public Builder maxId(int maxId) {
      this._maxId = maxId;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("IdMappings.Builder{");
      buf.append("ids").append('=').append(JodaBeanUtils.toString(_ids)).append(',').append(' ');
      buf.append("maxId").append('=').append(JodaBeanUtils.toString(_maxId));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.marketdata.manipulator.dsl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicImmutableBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;
import com.opengamma.engine.marketdata.manipulator.function.StructureManipulator;

/**
 * A manipulator which applies a list of point shifts.
 */
@BeanDefinition
public final class YieldCurvePointShiftManipulator implements ImmutableBean, StructureManipulator<YieldAndDiscountCurve>  {

  /**
   * 
   */
  private static final long serialVersionUID = 1907990408105734359L;
  
  /**
   * The list of point shifts to apply
   */
  @PropertyDefinition
  private final ImmutableList<YieldCurvePointShift> _pointShifts;

  @Override
  public YieldAndDiscountCurve execute(YieldAndDiscountCurve structure) {
    //TODO
    return null;
  }

  @Override
  public Class<YieldAndDiscountCurve> getExpectedType() {
    return YieldAndDiscountCurve.class;
  }
  
  /**
   * Creates a YieldCurvePointShiftManipulator from the given list of shifts.
   * @param pointShifts the list of shifts
   * @return the YieldCurvePointShiftManipulator object
   */
  public static YieldCurvePointShiftManipulator create(List<YieldCurvePointShift> pointShifts) {
    return new YieldCurvePointShiftManipulator(pointShifts);
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code YieldCurvePointShiftManipulator}.
   * @return the meta-bean, not null
   */
  public static YieldCurvePointShiftManipulator.Meta meta() {
    return YieldCurvePointShiftManipulator.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(YieldCurvePointShiftManipulator.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   *
   * @return the builder, not null
   */
  public static YieldCurvePointShiftManipulator.Builder builder() {
    return new YieldCurvePointShiftManipulator.Builder();
  }

  private YieldCurvePointShiftManipulator(
      List<YieldCurvePointShift> pointShifts) {
    this._pointShifts = (pointShifts != null ? ImmutableList.copyOf(pointShifts) : null);
  }

  @Override
  public YieldCurvePointShiftManipulator.Meta metaBean() {
    return YieldCurvePointShiftManipulator.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the list of point shifts to apply
   * @return the value of the property
   */
  public ImmutableList<YieldCurvePointShift> getPointShifts() {
    return _pointShifts;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public YieldCurvePointShiftManipulator clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      YieldCurvePointShiftManipulator other = (YieldCurvePointShiftManipulator) obj;
      return JodaBeanUtils.equal(getPointShifts(), other.getPointShifts());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getPointShifts());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("YieldCurvePointShiftManipulator{");
    buf.append("pointShifts").append('=').append(JodaBeanUtils.toString(getPointShifts()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code YieldCurvePointShiftManipulator}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code pointShifts} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<YieldCurvePointShift>> _pointShifts = DirectMetaProperty.ofImmutable(
        this, "pointShifts", YieldCurvePointShiftManipulator.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "pointShifts");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 244906465:  // pointShifts
          return _pointShifts;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public YieldCurvePointShiftManipulator.Builder builder() {
      return new YieldCurvePointShiftManipulator.Builder();
    }

    @Override
    public Class<? extends YieldCurvePointShiftManipulator> beanType() {
      return YieldCurvePointShiftManipulator.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code pointShifts} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<YieldCurvePointShift>> pointShifts() {
      return _pointShifts;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 244906465:  // pointShifts
          return ((YieldCurvePointShiftManipulator) bean).getPointShifts();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code YieldCurvePointShiftManipulator}.
   */
  public static final class Builder extends BasicImmutableBeanBuilder<YieldCurvePointShiftManipulator> {

    private List<YieldCurvePointShift> _pointShifts;

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(YieldCurvePointShiftManipulator.Meta.INSTANCE);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(YieldCurvePointShiftManipulator beanToCopy) {
      super(YieldCurvePointShiftManipulator.Meta.INSTANCE);
      this._pointShifts = (beanToCopy.getPointShifts() != null ? new ArrayList<YieldCurvePointShift>(beanToCopy.getPointShifts()) : null);
    }

    //-----------------------------------------------------------------------
    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 244906465:  // pointShifts
          this._pointShifts = (List<YieldCurvePointShift>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public YieldCurvePointShiftManipulator build() {
      return new YieldCurvePointShiftManipulator(
          _pointShifts);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code pointShifts} property in the builder.
     * @param pointShifts  the new value
     * @return this, for chaining, not null
     */
    public Builder pointShifts(List<YieldCurvePointShift> pointShifts) {
      this._pointShifts = pointShifts;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("YieldCurvePointShiftManipulator.Builder{");
      buf.append("pointShifts").append('=').append(_pointShifts);
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

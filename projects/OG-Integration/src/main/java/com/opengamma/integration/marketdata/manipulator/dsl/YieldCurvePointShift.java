/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.integration.marketdata.manipulator.dsl;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.BasicImmutableBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

/**
 * Applies a point shift to a {@link YieldAndDiscountCurve}.
 */
@BeanDefinition
public final class YieldCurvePointShift implements ImmutableBean {

  /**
   * The year of the shift (can be fractional)
   */
  @PropertyDefinition
  private final double _year;
  /**
   * The shift magnitude 
   */
  @PropertyDefinition
  private final double _shift;
  /**
   * The shift type
   */
  @PropertyDefinition
  private final CurveShiftType _shiftType;
  
  
  /**
   * @param year the year
   * @param shift the shift
   * @param shiftType the shift type
   * @return a YieldCurvePointShift object
   */
  public static YieldCurvePointShift create(double year,
      double shift,
      CurveShiftType shiftType) {
    return new YieldCurvePointShift(year, shift, shiftType);
  }
  
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code YieldCurvePointShift}.
   * @return the meta-bean, not null
   */
  public static YieldCurvePointShift.Meta meta() {
    return YieldCurvePointShift.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(YieldCurvePointShift.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   *
   * @return the builder, not null
   */
  public static YieldCurvePointShift.Builder builder() {
    return new YieldCurvePointShift.Builder();
  }

  private YieldCurvePointShift(
      double year,
      double shift,
      CurveShiftType shiftType) {
    this._year = year;
    this._shift = shift;
    this._shiftType = shiftType;
  }

  @Override
  public YieldCurvePointShift.Meta metaBean() {
    return YieldCurvePointShift.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the year of the shift (can be fractional)
   * @return the value of the property
   */
  public double getYear() {
    return _year;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the shift magnitude
   * @return the value of the property
   */
  public double getShift() {
    return _shift;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the shift type
   * @return the value of the property
   */
  public CurveShiftType getShiftType() {
    return _shiftType;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public YieldCurvePointShift clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      YieldCurvePointShift other = (YieldCurvePointShift) obj;
      return JodaBeanUtils.equal(getYear(), other.getYear()) &&
          JodaBeanUtils.equal(getShift(), other.getShift()) &&
          JodaBeanUtils.equal(getShiftType(), other.getShiftType());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getYear());
    hash += hash * 31 + JodaBeanUtils.hashCode(getShift());
    hash += hash * 31 + JodaBeanUtils.hashCode(getShiftType());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("YieldCurvePointShift{");
    buf.append("year").append('=').append(getYear()).append(',').append(' ');
    buf.append("shift").append('=').append(getShift()).append(',').append(' ');
    buf.append("shiftType").append('=').append(JodaBeanUtils.toString(getShiftType()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code YieldCurvePointShift}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code year} property.
     */
    private final MetaProperty<Double> _year = DirectMetaProperty.ofImmutable(
        this, "year", YieldCurvePointShift.class, Double.TYPE);
    /**
     * The meta-property for the {@code shift} property.
     */
    private final MetaProperty<Double> _shift = DirectMetaProperty.ofImmutable(
        this, "shift", YieldCurvePointShift.class, Double.TYPE);
    /**
     * The meta-property for the {@code shiftType} property.
     */
    private final MetaProperty<CurveShiftType> _shiftType = DirectMetaProperty.ofImmutable(
        this, "shiftType", YieldCurvePointShift.class, CurveShiftType.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "year",
        "shift",
        "shiftType");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3704893:  // year
          return _year;
        case 109407362:  // shift
          return _shift;
        case 893345500:  // shiftType
          return _shiftType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public YieldCurvePointShift.Builder builder() {
      return new YieldCurvePointShift.Builder();
    }

    @Override
    public Class<? extends YieldCurvePointShift> beanType() {
      return YieldCurvePointShift.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code year} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> year() {
      return _year;
    }

    /**
     * The meta-property for the {@code shift} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> shift() {
      return _shift;
    }

    /**
     * The meta-property for the {@code shiftType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurveShiftType> shiftType() {
      return _shiftType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3704893:  // year
          return ((YieldCurvePointShift) bean).getYear();
        case 109407362:  // shift
          return ((YieldCurvePointShift) bean).getShift();
        case 893345500:  // shiftType
          return ((YieldCurvePointShift) bean).getShiftType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code YieldCurvePointShift}.
   */
  public static final class Builder extends BasicImmutableBeanBuilder<YieldCurvePointShift> {

    private double _year;
    private double _shift;
    private CurveShiftType _shiftType;

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(YieldCurvePointShift.Meta.INSTANCE);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(YieldCurvePointShift beanToCopy) {
      super(YieldCurvePointShift.Meta.INSTANCE);
      this._year = beanToCopy.getYear();
      this._shift = beanToCopy.getShift();
      this._shiftType = beanToCopy.getShiftType();
    }

    //-----------------------------------------------------------------------
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3704893:  // year
          this._year = (Double) newValue;
          break;
        case 109407362:  // shift
          this._shift = (Double) newValue;
          break;
        case 893345500:  // shiftType
          this._shiftType = (CurveShiftType) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public YieldCurvePointShift build() {
      return new YieldCurvePointShift(
          _year,
          _shift,
          _shiftType);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code year} property in the builder.
     * @param year  the new value
     * @return this, for chaining, not null
     */
    public Builder year(double year) {
      this._year = year;
      return this;
    }

    /**
     * Sets the {@code shift} property in the builder.
     * @param shift  the new value
     * @return this, for chaining, not null
     */
    public Builder shift(double shift) {
      this._shift = shift;
      return this;
    }

    /**
     * Sets the {@code shiftType} property in the builder.
     * @param shiftType  the new value
     * @return this, for chaining, not null
     */
    public Builder shiftType(CurveShiftType shiftType) {
      this._shiftType = shiftType;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("YieldCurvePointShift.Builder{");
      buf.append("year").append('=').append(_year).append(',').append(' ');
      buf.append("shift").append('=').append(_shift).append(',').append(' ');
      buf.append("shiftType").append('=').append(_shiftType);
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

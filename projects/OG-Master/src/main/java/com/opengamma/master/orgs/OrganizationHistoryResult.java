/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.orgs;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.OpenGammaRuntimeException;
import com.opengamma.master.AbstractHistoryResult;
import com.opengamma.util.PublicSPI;

/**
 * Result providing the history of an organization.
 * <p/>
 * The returned documents may be a mixture of versions and corrections.
 * The document instant fields are used to identify which are which.
 * See {@link com.opengamma.master.orgs.OrganizationHistoryRequest} for more details.
 */
@PublicSPI
@BeanDefinition
public class OrganizationHistoryResult extends AbstractHistoryResult<OrganizationDocument> {

  /**
   * Creates an instance.
   */
  public OrganizationHistoryResult() {
  }

  /**
   * Creates an instance from a collection of documents.
   *
   * @param coll the collection of documents to add, not null
   */
  public OrganizationHistoryResult(Collection<OrganizationDocument> coll) {
    super(coll);
  }

  //-------------------------------------------------------------------------

  /**
   * Gets the returned organizations from within the documents.
   *
   * @return the organizations, not null
   */
  public List<ManageableOrganization> getOrganizations() {
    List<ManageableOrganization> result = new ArrayList<ManageableOrganization>();
    if (getDocuments() != null) {
      for (OrganizationDocument doc : getDocuments()) {
        result.add(doc.getOrganization());
      }
    }
    return result;
  }

  /**
   * Gets the first organization, or null if no documents.
   *
   * @return the first organization, null if none
   */
  public ManageableOrganization getFirstOrganization() {
    return getDocuments().size() > 0 ? getDocuments().get(0).getOrganization() : null;
  }

  /**
   * Gets the single result expected from a query.
   * <p/>
   * This throws an exception if more than 1 result is actually available.
   * Thus, this method implies an assumption about uniqueness of the queried organization.
   *
   * @return the matching organization, not null
   * @throws IllegalStateException if no organization was found
   */
  public ManageableOrganization getSingleOrganization() {
    if (getDocuments().size() != 1) {
      throw new OpenGammaRuntimeException("Expecting zero or single resulting match, and was " + getDocuments().size());
    } else {
      return getDocuments().get(0).getOrganization();
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code OrganizationHistoryResult}.
   * @return the meta-bean, not null
   */
  public static OrganizationHistoryResult.Meta meta() {
    return OrganizationHistoryResult.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(OrganizationHistoryResult.Meta.INSTANCE);
  }

  @Override
  public OrganizationHistoryResult.Meta metaBean() {
    return OrganizationHistoryResult.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  @Override
  public OrganizationHistoryResult clone() {
    return (OrganizationHistoryResult) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("OrganizationHistoryResult{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code OrganizationHistoryResult}.
   */
  public static class Meta extends AbstractHistoryResult.Meta<OrganizationDocument> {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap());

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    public BeanBuilder<? extends OrganizationHistoryResult> builder() {
      return new DirectBeanBuilder<OrganizationHistoryResult>(new OrganizationHistoryResult());
    }

    @Override
    public Class<? extends OrganizationHistoryResult> beanType() {
      return OrganizationHistoryResult.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

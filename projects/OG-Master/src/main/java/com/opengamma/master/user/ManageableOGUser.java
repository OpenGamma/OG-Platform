/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.master.user;

import java.io.Serializable;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.ZoneId;

import com.google.common.collect.Sets;
import com.opengamma.core.user.OGUser;
import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.id.UniqueId;
import com.opengamma.util.OpenGammaClock;
import com.opengamma.util.PublicSPI;

/**
 * A user known to the OpenGamma Platform installation.
 * <p>
 * A user within the user management system.
 * Support is provided for external users as well as passwords.
 */
@PublicSPI
@BeanDefinition
public class ManageableOGUser extends DirectBean implements OGUser, Serializable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The unique identifier of the user.
   * This must be null when adding to a master and not null when retrieved from a master.
   */
  @PropertyDefinition
  private UniqueId _uniqueId;
  /**
   * The bundle of external identifiers that define the user.
   * This field must not be null for the object to be valid.
   */
  @PropertyDefinition(validate = "notNull")
  private ExternalIdBundle _externalIdBundle = ExternalIdBundle.EMPTY;
  /**
   * The user id that uniquely identifies the user
   * This is used with the password to authenticate.
   */
  @PropertyDefinition(validate = "notNull")
  private String _userId;
  /**
   * The hashed version of the user password, null if no password.
   */
  @PropertyDefinition
  private String _passwordHash;
  /**
   * The entitlements for the user.
   * This is a set of entitlements that the user has, which enables access restriction.
   */
  @PropertyDefinition(validate = "notNull")
  private final Set<String> _entitlements = Sets.newHashSet();
  /**
   * The display user name, used to identify the user in a GUI.
   */
  @PropertyDefinition
  private String _name;
  /**
   * The time-zone used to display local times.
   */
  @PropertyDefinition(validate = "notNull")
  private ZoneId _timeZone = OpenGammaClock.getZone();
  /**
   * The primary email address associated with the account.
   */
  @PropertyDefinition
  private String _emailAddress;

  /**
   * Creates a user.
   */
  protected ManageableOGUser() {
  }

  /**
   * Creates a user, setting the user id.
   * 
   * @param userId  the user id, not null
   */
  public ManageableOGUser(String userId) {
    setUserId(userId);
  }

  /**
   * Clones the user, returning an independent copy.
   * 
   * @return the clone, not null
   */
  public ManageableOGUser clone() {
    ManageableOGUser cloned = new ManageableOGUser();
    cloned._uniqueId = _uniqueId;
    cloned._externalIdBundle = _externalIdBundle;
    cloned._userId = _userId;
    cloned._passwordHash = _passwordHash;
    cloned._entitlements.addAll(_entitlements);
    cloned._name = _name;
    cloned._timeZone = _timeZone;
    cloned._emailAddress = _emailAddress;
    return cloned;
  }

  //-------------------------------------------------------------------------
  /**
   * Adds an external identifier to the bundle representing this user.
   * 
   * @param userId  the identifier to add, not null
   */
  public void addExternalId(ExternalId userId) {
    setExternalIdBundle(getExternalIdBundle().withExternalId(userId));
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ManageableOGUser}.
   * @return the meta-bean, not null
   */
  public static ManageableOGUser.Meta meta() {
    return ManageableOGUser.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ManageableOGUser.Meta.INSTANCE);
  }

  @Override
  public ManageableOGUser.Meta metaBean() {
    return ManageableOGUser.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the unique identifier of the user.
   * This must be null when adding to a master and not null when retrieved from a master.
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the unique identifier of the user.
   * This must be null when adding to a master and not null when retrieved from a master.
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * This must be null when adding to a master and not null when retrieved from a master.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the bundle of external identifiers that define the user.
   * This field must not be null for the object to be valid.
   * @return the value of the property, not null
   */
  public ExternalIdBundle getExternalIdBundle() {
    return _externalIdBundle;
  }

  /**
   * Sets the bundle of external identifiers that define the user.
   * This field must not be null for the object to be valid.
   * @param externalIdBundle  the new value of the property, not null
   */
  public void setExternalIdBundle(ExternalIdBundle externalIdBundle) {
    JodaBeanUtils.notNull(externalIdBundle, "externalIdBundle");
    this._externalIdBundle = externalIdBundle;
  }

  /**
   * Gets the the {@code externalIdBundle} property.
   * This field must not be null for the object to be valid.
   * @return the property, not null
   */
  public final Property<ExternalIdBundle> externalIdBundle() {
    return metaBean().externalIdBundle().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the user id that uniquely identifies the user
   * This is used with the password to authenticate.
   * @return the value of the property, not null
   */
  public String getUserId() {
    return _userId;
  }

  /**
   * Sets the user id that uniquely identifies the user
   * This is used with the password to authenticate.
   * @param userId  the new value of the property, not null
   */
  public void setUserId(String userId) {
    JodaBeanUtils.notNull(userId, "userId");
    this._userId = userId;
  }

  /**
   * Gets the the {@code userId} property.
   * This is used with the password to authenticate.
   * @return the property, not null
   */
  public final Property<String> userId() {
    return metaBean().userId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the hashed version of the user password, null if no password.
   * @return the value of the property
   */
  public String getPasswordHash() {
    return _passwordHash;
  }

  /**
   * Sets the hashed version of the user password, null if no password.
   * @param passwordHash  the new value of the property
   */
  public void setPasswordHash(String passwordHash) {
    this._passwordHash = passwordHash;
  }

  /**
   * Gets the the {@code passwordHash} property.
   * @return the property, not null
   */
  public final Property<String> passwordHash() {
    return metaBean().passwordHash().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the entitlements for the user.
   * This is a set of entitlements that the user has, which enables access restriction.
   * @return the value of the property, not null
   */
  public Set<String> getEntitlements() {
    return _entitlements;
  }

  /**
   * Sets the entitlements for the user.
   * This is a set of entitlements that the user has, which enables access restriction.
   * @param entitlements  the new value of the property
   */
  public void setEntitlements(Set<String> entitlements) {
    this._entitlements.clear();
    this._entitlements.addAll(entitlements);
  }

  /**
   * Gets the the {@code entitlements} property.
   * This is a set of entitlements that the user has, which enables access restriction.
   * @return the property, not null
   */
  public final Property<Set<String>> entitlements() {
    return metaBean().entitlements().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the display user name, used to identify the user in a GUI.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the display user name, used to identify the user in a GUI.
   * @param name  the new value of the property
   */
  public void setName(String name) {
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time-zone used to display local times.
   * @return the value of the property, not null
   */
  public ZoneId getTimeZone() {
    return _timeZone;
  }

  /**
   * Sets the time-zone used to display local times.
   * @param timeZone  the new value of the property, not null
   */
  public void setTimeZone(ZoneId timeZone) {
    JodaBeanUtils.notNull(timeZone, "timeZone");
    this._timeZone = timeZone;
  }

  /**
   * Gets the the {@code timeZone} property.
   * @return the property, not null
   */
  public final Property<ZoneId> timeZone() {
    return metaBean().timeZone().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the primary email address associated with the account.
   * @return the value of the property
   */
  public String getEmailAddress() {
    return _emailAddress;
  }

  /**
   * Sets the primary email address associated with the account.
   * @param emailAddress  the new value of the property
   */
  public void setEmailAddress(String emailAddress) {
    this._emailAddress = emailAddress;
  }

  /**
   * Gets the the {@code emailAddress} property.
   * @return the property, not null
   */
  public final Property<String> emailAddress() {
    return metaBean().emailAddress().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ManageableOGUser other = (ManageableOGUser) obj;
      return JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          JodaBeanUtils.equal(getExternalIdBundle(), other.getExternalIdBundle()) &&
          JodaBeanUtils.equal(getUserId(), other.getUserId()) &&
          JodaBeanUtils.equal(getPasswordHash(), other.getPasswordHash()) &&
          JodaBeanUtils.equal(getEntitlements(), other.getEntitlements()) &&
          JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getTimeZone(), other.getTimeZone()) &&
          JodaBeanUtils.equal(getEmailAddress(), other.getEmailAddress());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getExternalIdBundle());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUserId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPasswordHash());
    hash += hash * 31 + JodaBeanUtils.hashCode(getEntitlements());
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getTimeZone());
    hash += hash * 31 + JodaBeanUtils.hashCode(getEmailAddress());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(288);
    buf.append("ManageableOGUser{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("uniqueId").append('=').append(JodaBeanUtils.toString(getUniqueId())).append(',').append(' ');
    buf.append("externalIdBundle").append('=').append(JodaBeanUtils.toString(getExternalIdBundle())).append(',').append(' ');
    buf.append("userId").append('=').append(JodaBeanUtils.toString(getUserId())).append(',').append(' ');
    buf.append("passwordHash").append('=').append(JodaBeanUtils.toString(getPasswordHash())).append(',').append(' ');
    buf.append("entitlements").append('=').append(JodaBeanUtils.toString(getEntitlements())).append(',').append(' ');
    buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
    buf.append("timeZone").append('=').append(JodaBeanUtils.toString(getTimeZone())).append(',').append(' ');
    buf.append("emailAddress").append('=').append(JodaBeanUtils.toString(getEmailAddress())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ManageableOGUser}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", ManageableOGUser.class, UniqueId.class);
    /**
     * The meta-property for the {@code externalIdBundle} property.
     */
    private final MetaProperty<ExternalIdBundle> _externalIdBundle = DirectMetaProperty.ofReadWrite(
        this, "externalIdBundle", ManageableOGUser.class, ExternalIdBundle.class);
    /**
     * The meta-property for the {@code userId} property.
     */
    private final MetaProperty<String> _userId = DirectMetaProperty.ofReadWrite(
        this, "userId", ManageableOGUser.class, String.class);
    /**
     * The meta-property for the {@code passwordHash} property.
     */
    private final MetaProperty<String> _passwordHash = DirectMetaProperty.ofReadWrite(
        this, "passwordHash", ManageableOGUser.class, String.class);
    /**
     * The meta-property for the {@code entitlements} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Set<String>> _entitlements = DirectMetaProperty.ofReadWrite(
        this, "entitlements", ManageableOGUser.class, (Class) Set.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", ManageableOGUser.class, String.class);
    /**
     * The meta-property for the {@code timeZone} property.
     */
    private final MetaProperty<ZoneId> _timeZone = DirectMetaProperty.ofReadWrite(
        this, "timeZone", ManageableOGUser.class, ZoneId.class);
    /**
     * The meta-property for the {@code emailAddress} property.
     */
    private final MetaProperty<String> _emailAddress = DirectMetaProperty.ofReadWrite(
        this, "emailAddress", ManageableOGUser.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "uniqueId",
        "externalIdBundle",
        "userId",
        "passwordHash",
        "entitlements",
        "name",
        "timeZone",
        "emailAddress");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return _uniqueId;
        case -736922008:  // externalIdBundle
          return _externalIdBundle;
        case -836030906:  // userId
          return _userId;
        case 566700617:  // passwordHash
          return _passwordHash;
        case -1704576794:  // entitlements
          return _entitlements;
        case 3373707:  // name
          return _name;
        case -2077180903:  // timeZone
          return _timeZone;
        case -1070931784:  // emailAddress
          return _emailAddress;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ManageableOGUser> builder() {
      return new DirectBeanBuilder<ManageableOGUser>(new ManageableOGUser());
    }

    @Override
    public Class<? extends ManageableOGUser> beanType() {
      return ManageableOGUser.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

    /**
     * The meta-property for the {@code externalIdBundle} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalIdBundle> externalIdBundle() {
      return _externalIdBundle;
    }

    /**
     * The meta-property for the {@code userId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> userId() {
      return _userId;
    }

    /**
     * The meta-property for the {@code passwordHash} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> passwordHash() {
      return _passwordHash;
    }

    /**
     * The meta-property for the {@code entitlements} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Set<String>> entitlements() {
      return _entitlements;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code timeZone} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ZoneId> timeZone() {
      return _timeZone;
    }

    /**
     * The meta-property for the {@code emailAddress} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> emailAddress() {
      return _emailAddress;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return ((ManageableOGUser) bean).getUniqueId();
        case -736922008:  // externalIdBundle
          return ((ManageableOGUser) bean).getExternalIdBundle();
        case -836030906:  // userId
          return ((ManageableOGUser) bean).getUserId();
        case 566700617:  // passwordHash
          return ((ManageableOGUser) bean).getPasswordHash();
        case -1704576794:  // entitlements
          return ((ManageableOGUser) bean).getEntitlements();
        case 3373707:  // name
          return ((ManageableOGUser) bean).getName();
        case -2077180903:  // timeZone
          return ((ManageableOGUser) bean).getTimeZone();
        case -1070931784:  // emailAddress
          return ((ManageableOGUser) bean).getEmailAddress();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          ((ManageableOGUser) bean).setUniqueId((UniqueId) newValue);
          return;
        case -736922008:  // externalIdBundle
          ((ManageableOGUser) bean).setExternalIdBundle((ExternalIdBundle) newValue);
          return;
        case -836030906:  // userId
          ((ManageableOGUser) bean).setUserId((String) newValue);
          return;
        case 566700617:  // passwordHash
          ((ManageableOGUser) bean).setPasswordHash((String) newValue);
          return;
        case -1704576794:  // entitlements
          ((ManageableOGUser) bean).setEntitlements((Set<String>) newValue);
          return;
        case 3373707:  // name
          ((ManageableOGUser) bean).setName((String) newValue);
          return;
        case -2077180903:  // timeZone
          ((ManageableOGUser) bean).setTimeZone((ZoneId) newValue);
          return;
        case -1070931784:  // emailAddress
          ((ManageableOGUser) bean).setEmailAddress((String) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((ManageableOGUser) bean)._externalIdBundle, "externalIdBundle");
      JodaBeanUtils.notNull(((ManageableOGUser) bean)._userId, "userId");
      JodaBeanUtils.notNull(((ManageableOGUser) bean)._entitlements, "entitlements");
      JodaBeanUtils.notNull(((ManageableOGUser) bean)._timeZone, "timeZone");
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

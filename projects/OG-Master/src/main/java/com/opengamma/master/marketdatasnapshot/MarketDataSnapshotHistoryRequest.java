/**
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.master.marketdatasnapshot;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.Instant;

import com.opengamma.id.ObjectIdentifiable;
import com.opengamma.master.AbstractHistoryRequest;
import com.opengamma.util.PublicSPI;

/**
 * Request for the history of a market data snapshot.
 * <p>
 * A full snapshot master implements historical storage of data.
 * History can be stored in two dimensions and this request provides searching.
 * <p>
 * The first historic dimension is the classic series of versions.
 * Each new version is stored in such a manor that previous versions can be accessed.
 * <p>
 * The second historic dimension is corrections.
 * A correction occurs when it is realized that the original data stored was incorrect.
 * A simple master might simply replace the original version with the corrected value.
 * A full implementation will store the correction in such a manner that it is still possible
 * to obtain the value before the correction was made.
 * <p>
 * For example, a snapshot added on Monday and updated on Thursday has two versions.
 * If it is realized on Friday that the version stored on Monday was incorrect, then a
 * correction may be applied. There are now two versions, the first of which has one correction.
 * This may continue, with multiple corrections allowed for each version.
 * <p>
 * Versions and corrections are represented by instants in the search.
 */
@PublicSPI
@BeanDefinition
public class MarketDataSnapshotHistoryRequest extends AbstractHistoryRequest {

  /**
   * Set whether to include the data values from the snapshot.
   * Set to false to reduce the size of the data transferred. Defaults to true.
   * A master implementation may ignore this part of the request and always include the data.
   */
  @PropertyDefinition
  private boolean _includeData = true;

  /**
   * Creates an instance.
   * The object identifier must be added before searching.
   */
  public MarketDataSnapshotHistoryRequest() {
    super();
  }

  /**
   * Creates an instance with object identifier.
   * This will retrieve all versions and corrections unless the relevant fields are set.
   * 
   * @param objectId  the object identifier, not null
   */
  public MarketDataSnapshotHistoryRequest(final ObjectIdentifiable objectId) {
    super(objectId);
  }

  /**
   * Creates an instance with object identifier and optional version and correction.
   * 
   * @param objectId  the object identifier, not null
   * @param versionInstant  the version instant to retrieve, null for all versions
   * @param correctedToInstant  the instant that the data should be corrected to, null for all corrections
   */
  public MarketDataSnapshotHistoryRequest(final ObjectIdentifiable objectId, Instant versionInstant, Instant correctedToInstant) {
    super(objectId, versionInstant, correctedToInstant);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MarketDataSnapshotHistoryRequest}.
   * @return the meta-bean, not null
   */
  public static MarketDataSnapshotHistoryRequest.Meta meta() {
    return MarketDataSnapshotHistoryRequest.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(MarketDataSnapshotHistoryRequest.Meta.INSTANCE);
  }

  @Override
  public MarketDataSnapshotHistoryRequest.Meta metaBean() {
    return MarketDataSnapshotHistoryRequest.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets set whether to include the data values from the snapshot.
   * Set to false to reduce the size of the data transferred. Defaults to true.
   * A master implementation may ignore this part of the request and always include the data.
   * @return the value of the property
   */
  public boolean isIncludeData() {
    return _includeData;
  }

  /**
   * Sets set whether to include the data values from the snapshot.
   * Set to false to reduce the size of the data transferred. Defaults to true.
   * A master implementation may ignore this part of the request and always include the data.
   * @param includeData  the new value of the property
   */
  public void setIncludeData(boolean includeData) {
    this._includeData = includeData;
  }

  /**
   * Gets the the {@code includeData} property.
   * Set to false to reduce the size of the data transferred. Defaults to true.
   * A master implementation may ignore this part of the request and always include the data.
   * @return the property, not null
   */
  public final Property<Boolean> includeData() {
    return metaBean().includeData().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public MarketDataSnapshotHistoryRequest clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MarketDataSnapshotHistoryRequest other = (MarketDataSnapshotHistoryRequest) obj;
      return (isIncludeData() == other.isIncludeData()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(isIncludeData());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("MarketDataSnapshotHistoryRequest{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("includeData").append('=').append(JodaBeanUtils.toString(isIncludeData())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MarketDataSnapshotHistoryRequest}.
   */
  public static class Meta extends AbstractHistoryRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code includeData} property.
     */
    private final MetaProperty<Boolean> _includeData = DirectMetaProperty.ofReadWrite(
        this, "includeData", MarketDataSnapshotHistoryRequest.class, Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "includeData");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 274670706:  // includeData
          return _includeData;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends MarketDataSnapshotHistoryRequest> builder() {
      return new DirectBeanBuilder<MarketDataSnapshotHistoryRequest>(new MarketDataSnapshotHistoryRequest());
    }

    @Override
    public Class<? extends MarketDataSnapshotHistoryRequest> beanType() {
      return MarketDataSnapshotHistoryRequest.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code includeData} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> includeData() {
      return _includeData;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 274670706:  // includeData
          return ((MarketDataSnapshotHistoryRequest) bean).isIncludeData();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 274670706:  // includeData
          ((MarketDataSnapshotHistoryRequest) bean).setIncludeData((Boolean) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

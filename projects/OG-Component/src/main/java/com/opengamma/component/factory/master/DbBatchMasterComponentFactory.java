/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.component.factory.master;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.batch.BatchMaster;
import com.opengamma.batch.rest.DataBatchMasterResource;
import com.opengamma.batch.rest.RemoteBatchMaster;
import com.opengamma.component.ComponentInfo;
import com.opengamma.component.ComponentRepository;
import com.opengamma.engine.ComputationTargetResolver;
import com.opengamma.masterdb.batch.DbBatchMaster;
import com.opengamma.util.rest.AbstractDataResource;

/**
 * Component factory for the database batch master.
 */
@BeanDefinition
public class DbBatchMasterComponentFactory extends AbstractDbMasterComponentFactory<BatchMaster, DbBatchMaster> {

  @PropertyDefinition(validate = "notNull")
  private ComputationTargetResolver _computationTargetResolver;
  
  public DbBatchMasterComponentFactory() {
    super("rsk", BatchMaster.class, RemoteBatchMaster.class);
  }

  @Override
  protected DbBatchMaster createMaster(ComponentRepository repo, ComponentInfo info) throws Exception {
    return new DbBatchMaster(getDbConnector(), getComputationTargetResolver());
  }

  @Override
  protected AbstractDataResource createPublishedResource(DbBatchMaster dbMaster, BatchMaster postProcessedMaster) {
    return new DataBatchMasterResource(dbMaster);
  }


  @Override
  protected BatchMaster wrapMasterWithTrackingInterface(BatchMaster postProcessedMaster) {
    throw new UnsupportedOperationException("Batch master does not support tracking.");
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DbBatchMasterComponentFactory}.
   * @return the meta-bean, not null
   */
  public static DbBatchMasterComponentFactory.Meta meta() {
    return DbBatchMasterComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DbBatchMasterComponentFactory.Meta.INSTANCE);
  }

  @Override
  public DbBatchMasterComponentFactory.Meta metaBean() {
    return DbBatchMasterComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the computationTargetResolver.
   * @return the value of the property, not null
   */
  public ComputationTargetResolver getComputationTargetResolver() {
    return _computationTargetResolver;
  }

  /**
   * Sets the computationTargetResolver.
   * @param computationTargetResolver  the new value of the property, not null
   */
  public void setComputationTargetResolver(ComputationTargetResolver computationTargetResolver) {
    JodaBeanUtils.notNull(computationTargetResolver, "computationTargetResolver");
    this._computationTargetResolver = computationTargetResolver;
  }

  /**
   * Gets the the {@code computationTargetResolver} property.
   * @return the property, not null
   */
  public final Property<ComputationTargetResolver> computationTargetResolver() {
    return metaBean().computationTargetResolver().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public DbBatchMasterComponentFactory clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DbBatchMasterComponentFactory other = (DbBatchMasterComponentFactory) obj;
      return JodaBeanUtils.equal(getComputationTargetResolver(), other.getComputationTargetResolver()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getComputationTargetResolver());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("DbBatchMasterComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("computationTargetResolver").append('=').append(JodaBeanUtils.toString(getComputationTargetResolver())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DbBatchMasterComponentFactory}.
   */
  public static class Meta extends AbstractDbMasterComponentFactory.Meta<BatchMaster, DbBatchMaster> {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code computationTargetResolver} property.
     */
    private final MetaProperty<ComputationTargetResolver> _computationTargetResolver = DirectMetaProperty.ofReadWrite(
        this, "computationTargetResolver", DbBatchMasterComponentFactory.class, ComputationTargetResolver.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "computationTargetResolver");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1562222174:  // computationTargetResolver
          return _computationTargetResolver;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DbBatchMasterComponentFactory> builder() {
      return new DirectBeanBuilder<DbBatchMasterComponentFactory>(new DbBatchMasterComponentFactory());
    }

    @Override
    public Class<? extends DbBatchMasterComponentFactory> beanType() {
      return DbBatchMasterComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code computationTargetResolver} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ComputationTargetResolver> computationTargetResolver() {
      return _computationTargetResolver;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1562222174:  // computationTargetResolver
          return ((DbBatchMasterComponentFactory) bean).getComputationTargetResolver();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1562222174:  // computationTargetResolver
          ((DbBatchMasterComponentFactory) bean).setComputationTargetResolver((ComputationTargetResolver) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((DbBatchMasterComponentFactory) bean)._computationTargetResolver, "computationTargetResolver");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.component.factory.master;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.component.ComponentInfo;
import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.master.legalentity.LegalEntityMaster;
import com.opengamma.master.legalentity.impl.DataLegalEntityMasterResource;
import com.opengamma.master.legalentity.impl.DataTrackingLegalEntityMaster;

/**
 * Component factory for {@link DataTrackingLegalEntityMaster}.
 */
@BeanDefinition
public class DataTrackingLegalEntityMasterComponentFactory extends AbstractComponentFactory {

  @PropertyDefinition(validate = "notNull")
  private String _classifier;
  
  @PropertyDefinition(validate = "notNull")
  private LegalEntityMaster _trackedMaster;
  
  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {
    
    ComponentInfo componentInfo = new ComponentInfo(LegalEntityMaster.class, _classifier);
    
    DataTrackingLegalEntityMaster dataTrackingLegalEntityMaster = new DataTrackingLegalEntityMaster(_trackedMaster);
    
    repo.registerComponent(componentInfo, dataTrackingLegalEntityMaster);
    
    repo.getRestComponents().publish(componentInfo, new DataLegalEntityMasterResource(_trackedMaster));
    
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DataTrackingLegalEntityMasterComponentFactory}.
   * @return the meta-bean, not null
   */
  public static DataTrackingLegalEntityMasterComponentFactory.Meta meta() {
    return DataTrackingLegalEntityMasterComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DataTrackingLegalEntityMasterComponentFactory.Meta.INSTANCE);
  }

  @Override
  public DataTrackingLegalEntityMasterComponentFactory.Meta metaBean() {
    return DataTrackingLegalEntityMasterComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier.
   * @return the value of the property, not null
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier.
   * @param classifier  the new value of the property, not null
   */
  public void setClassifier(String classifier) {
    JodaBeanUtils.notNull(classifier, "classifier");
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the trackedMaster.
   * @return the value of the property, not null
   */
  public LegalEntityMaster getTrackedMaster() {
    return _trackedMaster;
  }

  /**
   * Sets the trackedMaster.
   * @param trackedMaster  the new value of the property, not null
   */
  public void setTrackedMaster(LegalEntityMaster trackedMaster) {
    JodaBeanUtils.notNull(trackedMaster, "trackedMaster");
    this._trackedMaster = trackedMaster;
  }

  /**
   * Gets the the {@code trackedMaster} property.
   * @return the property, not null
   */
  public final Property<LegalEntityMaster> trackedMaster() {
    return metaBean().trackedMaster().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public DataTrackingLegalEntityMasterComponentFactory clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DataTrackingLegalEntityMasterComponentFactory other = (DataTrackingLegalEntityMasterComponentFactory) obj;
      return JodaBeanUtils.equal(getClassifier(), other.getClassifier()) &&
          JodaBeanUtils.equal(getTrackedMaster(), other.getTrackedMaster()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getTrackedMaster());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("DataTrackingLegalEntityMasterComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("classifier").append('=').append(JodaBeanUtils.toString(getClassifier())).append(',').append(' ');
    buf.append("trackedMaster").append('=').append(JodaBeanUtils.toString(getTrackedMaster())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DataTrackingLegalEntityMasterComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", DataTrackingLegalEntityMasterComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code trackedMaster} property.
     */
    private final MetaProperty<LegalEntityMaster> _trackedMaster = DirectMetaProperty.ofReadWrite(
        this, "trackedMaster", DataTrackingLegalEntityMasterComponentFactory.class, LegalEntityMaster.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "classifier",
        "trackedMaster");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return _classifier;
        case -1965332948:  // trackedMaster
          return _trackedMaster;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DataTrackingLegalEntityMasterComponentFactory> builder() {
      return new DirectBeanBuilder<DataTrackingLegalEntityMasterComponentFactory>(new DataTrackingLegalEntityMasterComponentFactory());
    }

    @Override
    public Class<? extends DataTrackingLegalEntityMasterComponentFactory> beanType() {
      return DataTrackingLegalEntityMasterComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

    /**
     * The meta-property for the {@code trackedMaster} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LegalEntityMaster> trackedMaster() {
      return _trackedMaster;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return ((DataTrackingLegalEntityMasterComponentFactory) bean).getClassifier();
        case -1965332948:  // trackedMaster
          return ((DataTrackingLegalEntityMasterComponentFactory) bean).getTrackedMaster();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          ((DataTrackingLegalEntityMasterComponentFactory) bean).setClassifier((String) newValue);
          return;
        case -1965332948:  // trackedMaster
          ((DataTrackingLegalEntityMasterComponentFactory) bean).setTrackedMaster((LegalEntityMaster) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((DataTrackingLegalEntityMasterComponentFactory) bean)._classifier, "classifier");
      JodaBeanUtils.notNull(((DataTrackingLegalEntityMasterComponentFactory) bean)._trackedMaster, "trackedMaster");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

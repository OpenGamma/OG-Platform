/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.core.link;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.security.Security;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.util.ArgumentChecker;

/**
 * Created by julian on 16/04/14.
 */
@BeanDefinition
public final class FixedSecurityLink<S extends Security> extends SecurityLink<S> implements ImmutableBean {

  /**
   * The security instance.
   */
  @PropertyDefinition(validate = "notNull")
  private final S _security;

  /**
   * Create the link, embedding the provided object.
   *
   * @param security the security object to be embedded
   */
  @ImmutableConstructor
  /* package */ FixedSecurityLink(S security) {
    _security = ArgumentChecker.notNull(security, "security");
  }

  @Override
  public S resolve() {
    return _security;
  }

  @Override
  @SuppressWarnings("unchecked")
  public Class<S> getTargetType() {
    return (Class<S>) _security.getClass();
  }

  /**
   * This is a temporary addition to allow links to operate in code that
   * relies on serialization of the identifier rather than a link. It
   * returns the bundle identifying the security. Note that a link
   * may not have an identifier in which case this method will throw an
   * {@link UnsupportedOperationException}.
   *
   * @return the identifier for a link if available
   */
  @Override
  public ExternalIdBundle getIdentifier() {
    throw new UnsupportedOperationException("Fixed security link does not hold an identifier for its security");
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FixedSecurityLink}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static FixedSecurityLink.Meta meta() {
    return FixedSecurityLink.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code FixedSecurityLink}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R extends Security> FixedSecurityLink.Meta<R> metaFixedSecurityLink(Class<R> cls) {
    return FixedSecurityLink.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FixedSecurityLink.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <S>  the type
   * @return the builder, not null
   */
  public static <S extends Security> FixedSecurityLink.Builder<S> builder() {
    return new FixedSecurityLink.Builder<S>();
  }

  @SuppressWarnings("unchecked")
  @Override
  public FixedSecurityLink.Meta<S> metaBean() {
    return FixedSecurityLink.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the security instance.
   * @return the value of the property, not null
   */
  public S getSecurity() {
    return _security;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<S> toBuilder() {
    return new Builder<S>(this);
  }

  @Override
  public FixedSecurityLink<S> clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FixedSecurityLink<?> other = (FixedSecurityLink<?>) obj;
      return JodaBeanUtils.equal(getSecurity(), other.getSecurity());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getSecurity());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("FixedSecurityLink{");
    buf.append("security").append('=').append(JodaBeanUtils.toString(getSecurity()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FixedSecurityLink}.
   */
  public static final class Meta<S extends Security> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code security} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<S> _security = (DirectMetaProperty) DirectMetaProperty.ofImmutable(
        this, "security", FixedSecurityLink.class, Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "security");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 949122880:  // security
          return _security;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FixedSecurityLink.Builder<S> builder() {
      return new FixedSecurityLink.Builder<S>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends FixedSecurityLink<S>> beanType() {
      return (Class) FixedSecurityLink.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code security} property.
     * @return the meta-property, not null
     */
    public MetaProperty<S> security() {
      return _security;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 949122880:  // security
          return ((FixedSecurityLink<?>) bean).getSecurity();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FixedSecurityLink}.
   */
  public static final class Builder<S extends Security> extends DirectFieldsBeanBuilder<FixedSecurityLink<S>> {

    private S _security;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FixedSecurityLink<S> beanToCopy) {
      this._security = beanToCopy.getSecurity();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 949122880:  // security
          return _security;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<S> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 949122880:  // security
          this._security = (S) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<S> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<S> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<S> setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<S> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FixedSecurityLink<S> build() {
      return new FixedSecurityLink<S>(
          _security);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code security} property in the builder.
     * @param security  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<S> security(S security) {
      JodaBeanUtils.notNull(security, "security");
      this._security = security;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("FixedSecurityLink.Builder{");
      buf.append("security").append('=').append(JodaBeanUtils.toString(_security));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.core.link;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.util.ArgumentChecker;

/**
 * Represents a link to a Config object using an actual instance. When the resolve
 * method is called, the embedded object is then returned.
 *
 * @param <C> type of the config
 */
@BeanDefinition
public final class FixedConfigLink<C> extends ConfigLink<C> implements ImmutableBean {

  /**
   * The config instance.
   */
  @PropertyDefinition(validate = "notNull")
  private final C _config;

  /**
   * Create the link, embedding the provided object.
   *
   * @param config the config object to be embedded
   */
  @ImmutableConstructor
  /* package */ FixedConfigLink(C config) {
    _config = ArgumentChecker.notNull(config, "config");
  }

  @Override
  public C resolve() {
    return _config;
  }

  @Override
  @SuppressWarnings("unchecked")
  public Class<C> getTargetType() {
    return (Class<C>) _config.getClass();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FixedConfigLink}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static FixedConfigLink.Meta meta() {
    return FixedConfigLink.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code FixedConfigLink}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> FixedConfigLink.Meta<R> metaFixedConfigLink(Class<R> cls) {
    return FixedConfigLink.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FixedConfigLink.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <C>  the type
   * @return the builder, not null
   */
  public static <C> FixedConfigLink.Builder<C> builder() {
    return new FixedConfigLink.Builder<C>();
  }

  @SuppressWarnings("unchecked")
  @Override
  public FixedConfigLink.Meta<C> metaBean() {
    return FixedConfigLink.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the config instance.
   * @return the value of the property, not null
   */
  public C getConfig() {
    return _config;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<C> toBuilder() {
    return new Builder<C>(this);
  }

  @Override
  public FixedConfigLink<C> clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FixedConfigLink<?> other = (FixedConfigLink<?>) obj;
      return JodaBeanUtils.equal(getConfig(), other.getConfig());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getConfig());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("FixedConfigLink{");
    buf.append("config").append('=').append(JodaBeanUtils.toString(getConfig()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FixedConfigLink}.
   */
  public static final class Meta<C> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code config} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<C> _config = (DirectMetaProperty) DirectMetaProperty.ofImmutable(
        this, "config", FixedConfigLink.class, Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "config");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1354792126:  // config
          return _config;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FixedConfigLink.Builder<C> builder() {
      return new FixedConfigLink.Builder<C>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends FixedConfigLink<C>> beanType() {
      return (Class) FixedConfigLink.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code config} property.
     * @return the meta-property, not null
     */
    public MetaProperty<C> config() {
      return _config;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1354792126:  // config
          return ((FixedConfigLink<?>) bean).getConfig();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FixedConfigLink}.
   */
  public static final class Builder<C> extends DirectFieldsBeanBuilder<FixedConfigLink<C>> {

    private C _config;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FixedConfigLink<C> beanToCopy) {
      this._config = beanToCopy.getConfig();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1354792126:  // config
          return _config;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<C> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1354792126:  // config
          this._config = (C) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<C> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<C> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<C> setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<C> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FixedConfigLink<C> build() {
      return new FixedConfigLink<C>(
          _config);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code config} property in the builder.
     * @param config  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<C> config(C config) {
      JodaBeanUtils.notNull(config, "config");
      this._config = config;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("FixedConfigLink.Builder{");
      buf.append("config").append('=').append(JodaBeanUtils.toString(_config));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

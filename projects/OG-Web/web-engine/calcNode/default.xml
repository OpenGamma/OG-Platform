<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

  <!-- A global Fudge context configured with all of the relevant builders --> 
  <bean id="fudgeContext" class="com.opengamma.util.fudgemsg.OpenGammaFudgeContext" factory-method="getInstance" />

  <!-- Global EH Cache Manager -->
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="shared" value="true"/>
    <property name="configLocation" value="default-ehcache.xml" />
</bean>

  <!-- Source of slave threads -->  
  <bean id="slaveThreads" class="com.opengamma.util.ExecutorServiceFactoryBean">
    <property name="styleName" value="CACHED" />
  </bean>

  <!-- Historical data source -->
  <bean id="historicalTimeSeriesSource" class="com.opengamma.core.historicaltimeseries.impl.EHCachingHistoricalTimeSeriesSource">
    <constructor-arg>
      <bean class="com.opengamma.core.historicaltimeseries.impl.RemoteHistoricalTimeSeriesSource">
        <constructor-arg>
          <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
            <property name="uri" value="${opengamma.engine.configuration.url}/historicalTimeSeriesSource" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg ref="cacheManager" />
  </bean>
  <!-- TODO: need a cache; not incredibly high priority as only fetched at function initialisation -->
  <bean id="historicalTimeSeriesResolver" class="com.opengamma.master.historicaltimeseries.impl.RemoteHistoricalTimeSeriesResolver">
    <constructor-arg>
      <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
        <property name="uri" value="${opengamma.engine.configuration.url}/historicalTimeSeriesResolver" />
      </bean>
    </constructor-arg>
  </bean>

  <!-- Security Source -->
  <bean id="securitySource" class="com.opengamma.financial.security.EHCachingFinancialSecuritySource">
    <constructor-arg>
      <!-- TODO: test if this is quicker or not for target resolution than the direct remote -->
      <bean class="com.opengamma.financial.security.CoalescingFinancialSecuritySource">
        <constructor-arg>
          <bean class="com.opengamma.financial.security.RemoteFinancialSecuritySource">
            <constructor-arg>
              <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
                <property name="uri" value="${opengamma.engine.configuration.url}/securitySource" />
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg ref="cacheManager" />
  </bean>

  <!-- Position Source -->
  <bean id="positionSource" class="com.opengamma.core.position.impl.EHCachingPositionSource">
    <constructor-arg>
      <bean class="com.opengamma.core.position.impl.RemotePositionSource">
        <constructor-arg>
          <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
            <property name="uri" value="${opengamma.engine.configuration.url}/positionSource" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg ref="cacheManager" />
  </bean>
  
  <!-- Region source -->
  <bean id="regionSource" class="com.opengamma.master.region.impl.EHCachingRegionSource">
    <constructor-arg>
      <bean class="com.opengamma.core.region.impl.RemoteRegionSource">
        <constructor-arg>
          <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
            <property name="uri" value="${opengamma.engine.configuration.url}/regionSource" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg ref="cacheManager" />
  </bean>
  
  <!-- Conventions -->
  <bean id="conventionBundleSource" class="com.opengamma.financial.convention.EHCachingConventionBundleSource">
    <constructor-arg>
      <bean class="com.opengamma.financial.convention.rest.RemoteConventionBundleSource">
        <constructor-arg>
          <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
            <property name="uri" value="${opengamma.engine.configuration.url}/conventionBundleSource" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg ref="cacheManager" />
  </bean>
  
  <!-- Config Master and Config Source -->
  <!-- TODO: need a cache; not incredibly high priority as only fetched at function initialisation -->
  <bean id="configSource" class="com.opengamma.core.config.impl.RemoteConfigSource">
    <constructor-arg>
      <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
        <property name="uri" value="${opengamma.engine.configuration.url}/configSource" />
      </bean>
    </constructor-arg>
  </bean>
  
  <!-- Exchange Source -->
  <bean id="exchangeSource" class="com.opengamma.master.exchange.impl.EHCachingExchangeSource">
    <constructor-arg>
      <bean class="com.opengamma.core.exchange.impl.RemoteExchangeSource">
        <constructor-arg>
          <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
            <property name="uri" value="${opengamma.engine.configuration.url}/exchangeSource" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg ref="cacheManager" />
  </bean>
  
  <!-- Holiday Source -->
  <bean id="holidaySource" class="com.opengamma.core.holiday.impl.CachedHolidaySource">
    <constructor-arg>
      <bean class="com.opengamma.core.holiday.impl.RemoteHolidaySource">
        <constructor-arg>
          <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
            <property name="uri" value="${opengamma.engine.configuration.url}/holidaySource" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
  </bean>
  
  <!-- Currency conversions -->
  <!-- TODO: need a cache; not incredibly high priority as only fetched at function initialisation -->
  <bean id="currencyMatrixSource" class="com.opengamma.financial.currency.rest.RemoteCurrencyMatrixSource">
    <constructor-arg>
      <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
        <property name="uri" value="${opengamma.engine.configuration.url}/currencyMatrixSource" />
      </bean>
    </constructor-arg>
  </bean>

  <!-- Curves -->
  <!-- TODO: need a cache; not incredibly high priority as only fetched at function compilation -->
  <bean id="interpolatedYieldCurveDefinitionSource" class="com.opengamma.financial.analytics.ircurve.rest.RemoteInterpolatedYieldCurveDefinitionSource">
    <constructor-arg>
      <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
        <property name="uri" value="${opengamma.engine.configuration.url}/interpolatedYieldCurveDefinitionSource" />
      </bean>
    </constructor-arg>
  </bean>
  <!-- TODO: need a cache; not incredibly high priority as only fetched at function compilation -->
  <bean id="interpolatedYieldCurveSpecificationBuilder" class="com.opengamma.financial.analytics.ircurve.rest.RemoteInterpolatedYieldCurveSpecificationBuilder">
    <constructor-arg>
      <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
        <property name="uri" value="${opengamma.engine.configuration.url}/interpolatedYieldCurveSpecificationBuilder" />
      </bean>
    </constructor-arg>
  </bean>

  <!-- Volatility cubes -->
  <!-- TODO: need a cache; not incredibly high priority as only fetched at function compilation -->
  <bean id="combinedVolatilityCubeDefinitionSource" class="com.opengamma.financial.analytics.volatility.cube.rest.RemoteVolatilityCubeDefinitionSource">
    <constructor-arg>
      <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
        <property name="uri" value="${opengamma.engine.configuration.url}/volatilityCubeDefinitionSource" />
      </bean>
    </constructor-arg>
  </bean>
  
  <!-- View Computation Cache -->
  <bean id="sharedComputationCacheEndPoint" class="com.opengamma.transport.jaxrs.RemoteEndPointDescriptionProvider">
    <property name="uri" value="${opengamma.engine.configuration.url}/remoteCalcNode/cacheServer" />
  </bean>
  <bean id="computationCache" class="com.opengamma.engine.cache.RemoteViewComputationCacheSource">
    <constructor-arg>
      <bean class="com.opengamma.engine.cache.RemoteCacheClient">
        <constructor-arg>
          <bean class="com.opengamma.transport.FudgeConnectionFactoryBean">
            <property name="fudgeContext" ref="fudgeContext" />
            <property name="executorService" ref="slaveThreads" />
            <property name="endPointDescription" ref="sharedComputationCacheEndPoint" />
          </bean>
        </constructor-arg>
        <constructor-arg>
          <bean class="com.opengamma.transport.FudgeConnectionFactoryBean">
            <property name="fudgeContext" ref="fudgeContext" />
            <property name="executorService" ref="slaveThreads" />
            <property name="endPointDescription" ref="sharedComputationCacheEndPoint" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg>
      <bean class="com.opengamma.engine.cache.DefaultFudgeMessageStoreFactory">
        <constructor-arg>
          <!--
          <bean class="com.opengamma.engine.cache.BerkeleyDBBinaryDataStoreFactoryFactoryBean">
            <property name="dataStoreFolder" value="${opengamma.engine.calcnode.localdatastore}" />
          </bean>
          -->
          <bean class="com.opengamma.engine.cache.InMemoryBinaryDataStoreFactory" />
        </constructor-arg>
        <constructor-arg ref="fudgeContext" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="cacheManager" />
  </bean>

  <!-- Target resolver -->
  <bean id="targetResolver" class="com.opengamma.component.factory.engine.TargetResolverComponentFactory">
    <property name="cacheManager" ref="cacheManager" />
    <property name="currencyMatrixSource" ref="currencyMatrixSource" />
    <property name="positionSource" ref="positionSource" />
    <property name="securitySource" ref="securitySource" />
  </bean>
  
  <!-- Execution statistics -->
  <bean id="statisticsSender" class="com.opengamma.engine.calcnode.stats.FunctionInvocationStatisticsSender">
    <property name="serverScalingHint" value="${opengamma.engine.calcnode.scalinghint}" />
  </bean>
  
  <!-- Functions -->
  <bean id="functionCompilationContext" class="com.opengamma.financial.OpenGammaCompilationContextFactoryBean">
    <property name="computationTargetResolver" ref="targetResolver" />
    <property name="configSource" ref="configSource" />
    <property name="conventionBundleSource" ref="conventionBundleSource"/>
    <property name="exchangeSource" ref="exchangeSource" />
    <property name="holidaySource" ref="holidaySource" />
    <property name="historicalTimeSeriesSource" ref="historicalTimeSeriesSource" />
    <property name="historicalTimeSeriesResolver" ref="historicalTimeSeriesResolver" />
    <property name="interpolatedYieldCurveDefinitionSource" ref="interpolatedYieldCurveDefinitionSource" />
    <property name="interpolatedYieldCurveSpecificationBuilder" ref="interpolatedYieldCurveSpecificationBuilder" />
    <property name="positionSource" ref="positionSource" />
    <property name="regionSource" ref="regionSource"/>
    <property name="securitySource" ref="securitySource" />
    <property name="volatilityCubeDefinitionSource" ref="combinedVolatilityCubeDefinitionSource" />
  </bean>
  <bean id="functionExecutionContext" class="com.opengamma.financial.OpenGammaExecutionContextFactoryBean">
    <property name="configSource" ref="configSource" />
    <property name="conventionBundleSource" ref="conventionBundleSource"/>
    <property name="exchangeSource" ref="exchangeSource"/>
    <property name="historicalTimeSeriesSource" ref="historicalTimeSeriesSource" />
    <property name="holidaySource" ref="holidaySource"/>
    <property name="positionSource" ref="positionSource" />
    <property name="regionSource" ref="regionSource"/>
    <property name="securitySource" ref="securitySource" />
  </bean>
  <bean id="functionCompilation" class="com.opengamma.engine.function.CompiledFunctionService">
    <constructor-arg>
      <bean class="com.opengamma.financial.function.rest.RemoteFunctionConfigurationSource">
        <constructor-arg>
          <bean class="com.opengamma.transport.jaxrs.UriEndPointUriFactoryBean">
            <property name="uri" value="${opengamma.engine.configuration.url}/functionRepositoryConfiguration" />
          </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <constructor-arg>
      <bean class="com.opengamma.engine.function.CachingFunctionRepositoryCompiler" />
      <!-- <bean class="com.opengamma.engine.function.LazyFunctionRepositoryCompiler" /> -->
    </constructor-arg>
    <constructor-arg ref="functionCompilationContext" />
  </bean>
  
  <!-- Calculation node(s) -->
  <bean id="calcNodeFactory" class="com.opengamma.engine.calcnode.SimpleCalculationNodeFactory">
    <property name="viewComputationCache" ref="computationCache" />
    <property name="functionCompilationService" ref="functionCompilation" />
    <property name="functionExecutionContext" ref="functionExecutionContext" />
    <property name="executorService" ref="slaveThreads" />
    <property name="useWriteBehindSharedCache" value="true" />
    <property name="useAsynchronousTargetResolve" value="true" />
    <property name="statisticsGatherer" ref="statisticsSender" />
    <property name="maxJobItemExecution">
      <bean class="com.opengamma.engine.calcnode.CalculationNodeProcess$JobItemExecutionWatchdog">
        <property name="maxJobItemExecutionTime" value="${opengamma.engine.calcnode.maxjobitemtime}" />
      </bean>
    </property>
  </bean>
  <bean id="calcNodes" class="com.opengamma.engine.calcnode.SimpleCalculationNodeSet">
    <property name="nodeFactory" ref="calcNodeFactory" />
    <property name="nodesPerCore" value="${opengamma.engine.calcnode.nodespercore}" />
  </bean>
  
  <!-- Job invoker -->
  <bean id="jobInvoker" class="com.opengamma.engine.calcnode.RemoteNodeClient">
    <constructor-arg>
      <bean class="com.opengamma.transport.FudgeConnectionFactoryBean">
        <property name="fudgeContext" ref="fudgeContext" />
        <!-- Don't use slaveThreads - we need to preserve network message ordering -->
        <property name="endPointDescription">
          <bean class="com.opengamma.transport.jaxrs.RemoteEndPointDescriptionProvider">
            <property name="uri" value="${opengamma.engine.configuration.url}/remoteCalcNode/jobServer" />
          </bean>
        </property>
      </bean>
    </constructor-arg>
    <constructor-arg ref="functionCompilation" />
    <constructor-arg>
      <bean factory-bean="computationCache" factory-method="getIdentifierMap" />
    </constructor-arg>
    <constructor-arg ref="statisticsSender" />
    <constructor-arg ref="calcNodes" />
  </bean>
  
  <!-- JMX -->
  <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
    <property name="locateExistingServerIfPossible" value="true" />
  </bean>
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="com.opengamma.engine.calcnode.jmx.SimpleCalculationNodeInvocationContainer.registerMBeans" />
    <property name="arguments">
      <list>
        <ref bean="jobInvoker" />
        <ref bean="calcNodeFactory" />
        <ref bean="mbeanServer" />
      </list>
    </property>
  </bean>

</beans>

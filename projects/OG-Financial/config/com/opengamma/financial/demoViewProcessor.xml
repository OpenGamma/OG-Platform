<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
  <!-- Spring config file to setup an example view processor -->
  <!-- Not used by the main OG-Component servers -->
      
  <!-- Property file configuration -->
  <bean id="demoViewProcessorProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="ignoreUnresolvablePlaceholders" value="true" />
    <property name="locations">
      <list>
        <value>classpath:com/opengamma/financial/demoViewProcessor-common.properties</value>
        <value>classpath:demoViewProcessor-${opengamma.platform.runmode}.properties</value>
      </list>
    </property>
  </bean>

  <import resource="classpath:com/opengamma/financial/demoMasters.xml" />

  <bean id="htsResolver" class="com.opengamma.master.historicaltimeseries.impl.DefaultHistoricalTimeSeriesResolver">
    <constructor-arg>
      <bean class="com.opengamma.master.historicaltimeseries.impl.DefaultHistoricalTimeSeriesSelector">
        <constructor-arg ref="sharedConfigSource" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="dbHtsMaster" />
  </bean>

  <!-- ================================================================== -->
  <!-- User supplied data storage -->
  <bean id="userFinancialDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
    <property name="driverClass" value="${opengamma.financial-user.jdbc.driver}" />
    <property name="jdbcUrl" value="${opengamma.financial-user.jdbc.url}" />
    <property name="username" value="${opengamma.financial-user.jdbc.username}" />
    <property name="password" value="${opengamma.financial-user.jdbc.password}" />
    <property name="poolName" value="UserFinancial"/>
    <property name="partitionCount" value="1"/>
    <property name="acquireIncrement" value="1"/>
    <property name="minConnectionsPerPartition" value="1"/>
    <property name="maxConnectionsPerPartition" value="10"/>
  </bean>
  <bean id="userFinancialDbConnector" parent="abstractDbConnector">
    <property name="name" value="UserFinancial"/>
    <property name="dataSource" ref="userFinancialDataSource"/>
    <property name="dialectName" value="${opengamma.financial-user.db.dialect}"/>
    <property name="hibernateMappingFiles">
      <list>
        <bean class="com.opengamma.masterdb.security.hibernate.HibernateSecurityMasterFiles"/>
      </list>
    </property>
  </bean>

  <!-- User supplied Positions --> 
  <bean id="userFinancialPortfolioMaster" class="com.opengamma.masterdb.portfolio.DbPortfolioMaster">
    <constructor-arg ref="userFinancialDbConnector" />
    <property name="uniqueIdScheme" value="${opengamma.financial-user.db.portfoliomaster.scheme}" />
  </bean>
  <bean id="userFinancialPositionMaster" class="com.opengamma.masterdb.position.DbPositionMaster">
    <constructor-arg ref="userFinancialDbConnector" />
    <property name="uniqueIdScheme" value="${opengamma.financial-user.db.positionmaster.scheme}" />
  </bean>
  <bean id="userFinancialPositionSource" class="com.opengamma.master.position.impl.MasterPositionSource">
    <constructor-arg ref="userFinancialPortfolioMaster" />
    <constructor-arg ref="userFinancialPositionMaster" />
  </bean>
  <bean id="combinedPositionSource" class="com.opengamma.core.position.impl.DelegatingPositionSource">
    <constructor-arg ref="sharedPositionSource" />
    <constructor-arg>
      <map>
        <entry key="${opengamma.financial-user.db.portfoliomaster.scheme}" value-ref="userFinancialPositionSource" />
      </map>
    </constructor-arg>
  </bean>
  
  <!-- User supplied Securities -->
  <bean id="securityMasterChangeManager" class="com.opengamma.core.change.BasicChangeManager" />
  <bean id="userFinancialSecurityMaster" class="com.opengamma.masterdb.security.DbSecurityMaster">
    <constructor-arg ref="userFinancialDbConnector" />
    <property name="changeManager" ref="securityMasterChangeManager" />
    <property name="uniqueIdScheme" value="${opengamma.financial-user.db.securitymaster.scheme}" />
  </bean>
  <bean id="userFinancialSecuritySource" class="com.opengamma.financial.security.MasterFinancialSecuritySource">
    <constructor-arg ref="userFinancialSecurityMaster" />
  </bean>
  <bean id="combinedSecuritySourceUnderlying" class="com.opengamma.financial.security.DelegatingFinancialSecuritySource">
    <constructor-arg ref="sharedSecuritySource" />
    <constructor-arg>
      <map>
        <entry key="${opengamma.financial-user.db.securitymaster.scheme}" value-ref="userFinancialSecuritySource" />
      </map>
    </constructor-arg>
  </bean>
  <bean id="combinedSecuritySource" class="com.opengamma.financial.security.EHCachingFinancialSecuritySource">
    <constructor-arg ref="combinedSecuritySourceUnderlying" />
    <constructor-arg ref="standardCacheManager" />
  </bean>
  
  <!-- User market data snapshots -->
    <bean id="userSnapshotMasterChangeManager" class="com.opengamma.core.change.JmsChangeManager" init-method="start" >
    <constructor-arg ref="jmsConnector" />
    <constructor-arg value="userSnapshotMasterChangeManager" />
  </bean>
  <bean id="userFinancialSnapshotMaster" class="com.opengamma.masterdb.marketdatasnapshot.DbMarketDataSnapshotMaster">
    <constructor-arg ref="userFinancialDbConnector" />
    <property name="changeManager" ref="userSnapshotMasterChangeManager" />
    <property name="uniqueIdScheme" value="${opengamma.financial-user.db.snapshotmaster.scheme}" />
  </bean>
  <bean id="userFinancialSnapshotSource" class="com.opengamma.master.marketdatasnapshot.impl.MasterSnapshotSource">
    <constructor-arg ref="userFinancialSnapshotMaster" />
  </bean>
  <bean id="combinedMarketDataSnapshotSource" class="com.opengamma.core.marketdatasnapshot.impl.DelegatingSnapshotSource">
    <constructor-arg ref="sharedSnapshotSource" />
    <constructor-arg>
      <map>
        <entry key="${opengamma.financial-user.db.snapshotmaster.scheme}" value-ref="userFinancialSnapshotSource" />
      </map>
    </constructor-arg>
  </bean>
  
  <!-- User Yield curves -->
  <bean id="userInterpolatedYieldCurveDefinitionMaster" class="com.opengamma.financial.analytics.ircurve.InMemoryInterpolatedYieldCurveDefinitionMaster">
    <property name="uniqueIdScheme" value="UserCurves" />
  </bean>
  <alias name="userInterpolatedYieldCurveDefinitionMaster" alias="userInterpolatedYieldCurveDefinitionSource" />
  <bean id="combinedInterpolatedYieldCurveDefinitionSource" class="com.opengamma.financial.analytics.ircurve.AggregatingInterpolatedYieldCurveDefinitionSource">
    <constructor-arg>
      <list>
        <ref bean="userInterpolatedYieldCurveDefinitionSource" />
        <ref bean="sharedInterpolatedYieldCurveDefinitionSource" />
      </list>
    </constructor-arg>
  </bean>

  <!-- User Vol Cubes-->
  <!-- TODO: this properly, user source and cacheing -->
  
  <bean id="combinedVolatilityCubeDefinitionSource" class="com.opengamma.financial.analytics.volatility.cube.AggregatingVolatilityCubeDefinitionSource">
    <constructor-arg>
      <list>
        <ref bean="bloombergVolatilityCubeDefinitionSource" />
        <ref bean="sharedVolatilityCubeDefinitionSource" />
      </list>
    </constructor-arg>
  </bean>
  
  
  <bean id="sharedVolatilityCubeDefinitionSource" class="com.opengamma.financial.analytics.volatility.cube.ConfigDBVolatilityCubeDefinitionSource">
    <constructor-arg ref="sharedConfigSource" />
  </bean>
  
  <bean id="bloombergVolatilityCubeDefinitionSource" class="com.opengamma.financial.analytics.volatility.cube.BloombergVolatilityCubeDefinitionSource">
  </bean>
  <bean id="mainViewDefinitionRepository" class="com.opengamma.web.spring.ConfigDbViewDefinitionRepositoryFactoryBean">
    <property name="configMaster" ref="dbConfigMaster" />
  </bean>
  
  <bean id="userViewDefinitionRepository" class="com.opengamma.master.config.impl.InMemoryConfigMaster" />
  <bean id="aggregatingReadOnlyConfigMaster" class="com.opengamma.engine.view.AggregatingReadOnlyConfigMaster">
    <constructor-arg>
      <list>
        <ref bean="mainViewDefinitionRepository" />
        <ref bean="userViewDefinitionRepository" />
      </list>
    </constructor-arg>
  </bean>
  <bean id="combinedViewDefinitionRepository" class="com.opengamma.master.config.impl.MasterConfigSource">
    <constructor-arg ref="aggregatingReadOnlyConfigMaster"/>
  </bean>

  <!-- marketDataProviderResolver -->
  <import resource="classpath:marketData-${opengamma.platform.runmode}.xml" />

  <!-- ================================================================== -->
  <bean id="mainFunctionCompilationContext" class="com.opengamma.financial.OpenGammaCompilationContextFactoryBean">
    <property name="securitySource" ref="combinedSecuritySource" />
    <property name="positionSource" ref="combinedPositionSource" />
    <property name="regionSource" ref="sharedRegionSource"/>
    <property name="configMaster" ref="sharedConfigSource" />
    <property name="conventionBundleSource" ref="sharedConventionBundleSource"/>
    <property name="interpolatedYieldCurveDefinitionSource" ref="combinedInterpolatedYieldCurveDefinitionSource" />
    <property name="interpolatedYieldCurveSpecificationBuilder" ref="sharedInterpolatedYieldCurveSpecificationBuilder" />
    <property name="volatilityCubeDefinitionSource" ref="combinedVolatilityCubeDefinitionSource" />
    <property name="currencyMatrixSource" ref="sharedCurrencyMatrixSource" />
    <property name="holidaySource" ref="sharedHolidaySource" />
    <property name="exchangeSource" ref="sharedExchangeSource" />
  </bean>
  <bean id="mainOverrideOperationCompiler" class="com.opengamma.financial.marketdata.MarketDataELCompiler">
    <constructor-arg ref="sharedSecuritySource" />
  </bean>
  <bean id="mainFunctionExecutionContext" class="com.opengamma.financial.OpenGammaExecutionContextFactoryBean">
    <property name="historicalTimeSeriesSource" ref="sharedHistoricalTimeSeriesSource" />
    <property name="securitySource" ref="combinedSecuritySource" />
    <property name="positionSource" ref="combinedPositionSource" />
    <property name="regionSource" ref="sharedRegionSource"/>
    <property name="exchangeSource" ref="sharedExchangeSource"/>
    <property name="holidaySource" ref="sharedHolidaySource"/>
    <property name="conventionBundleSource" ref="sharedConventionBundleSource"/>
    <property name="configMaster" ref="sharedConfigSource" />
    <property name="overrideOperationCompiler" ref="mainOverrideOperationCompiler" />
  </bean>

  <!-- ================================================================== -->
  <bean id="mainUserPrincipal" class="${testUser.factory}" />

  <!-- ================================================================== -->
  <!-- Functions -->
  <bean id="mainCompiledFunctionService" class="com.opengamma.engine.function.CompiledFunctionService">
    <constructor-arg ref="sharedFunctionConfigurationSource" />
    <constructor-arg>
      <bean class="com.opengamma.engine.function.CachingFunctionRepositoryCompiler" />
    </constructor-arg>
    <constructor-arg ref="mainFunctionCompilationContext" />
  </bean>
  <bean id="mainFunctionResolver" class="com.opengamma.web.spring.DemoFunctionResolverFactoryBean">
    <property name="functionCompilationService" ref="mainCompiledFunctionService" />
  </bean>
  <bean id="mainFunctionExclusionGroups" class="com.opengamma.web.spring.DemoFunctionExclusionGroupsBean" />
  <bean id="mainAvailableOutputsProvider" class="com.opengamma.engine.view.helper.DefaultAvailableOutputsProvider">
    <constructor-arg ref="mainCompiledFunctionService" />
    <constructor-arg ref="mainFunctionExclusionGroups" />
    <constructor-arg ref="combinedPositionSource" />
    <constructor-arg ref="combinedSecuritySource" />
    <constructor-arg value="*" />
  </bean>
  
  <!-- Calculation nodes -->
  <!--
  <bean id="mainComputationCacheSource" class="com.opengamma.engine.view.cache.BerkeleyDBViewComputationCacheSourceFactoryBean">
    <property name="fudgeContext" ref="standardFudgeContext" />
  </bean>
  -->
  <bean id="mainComputationCacheSource" class="com.opengamma.engine.view.cache.InMemoryViewComputationCacheSource">
    <constructor-arg ref="standardFudgeContext" />
  </bean>
  <bean id="mainViewProcessorQueryReceiver" class="com.opengamma.engine.view.calcnode.ViewProcessorQueryReceiver" />
  <bean id="mainViewProcessorQuerySender" class="com.opengamma.engine.view.calcnode.ViewProcessorQuerySender">
    <constructor-arg>
      <bean class="com.opengamma.transport.ByteArrayFudgeRequestSender">
        <constructor-arg>
          <bean class="com.opengamma.transport.InMemoryByteArrayRequestConduit">
            <constructor-arg>
              <bean class="com.opengamma.transport.FudgeRequestDispatcher">
                <constructor-arg ref="mainViewProcessorQueryReceiver" />
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg> 
      </bean>
    </constructor-arg>
  </bean>
  <bean id="mainComputationTargetResolver" class="com.opengamma.engine.DefaultCachingComputationTargetResolver">
    <constructor-arg>
      <bean class="com.opengamma.engine.DefaultComputationTargetResolver">
        <constructor-arg ref="combinedSecuritySource" />
        <constructor-arg ref="combinedPositionSource" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="standardCacheManager" />
  </bean>
  <bean id="jobDispatchStatistics" class="com.opengamma.engine.view.calcnode.stats.TotallingNodeStatisticsGatherer" />
  <bean id="functionCosts" class="com.opengamma.engine.view.calcnode.stats.FunctionCosts">
    <constructor-arg ref="dbFunctionCostsMaster" />
  </bean>
  <bean id="mainComputationJobDispatcher" class="com.opengamma.engine.view.calcnode.JobDispatcher">
    <constructor-arg>
      <bean class="com.opengamma.engine.view.calcnode.LocalNodeJobInvoker">
        <constructor-arg>
				  <bean class="com.opengamma.engine.view.calcnode.LocalCalculationNodeSet">
				    <property name="viewComputationCache" ref="mainComputationCacheSource" />
				    <property name="functionCompilationService" ref="mainCompiledFunctionService" />
				    <property name="functionExecutionContext" ref="mainFunctionExecutionContext" />
				    <property name="viewProcessorQuery" ref="mainViewProcessorQuerySender" />
				    <property name="writeBehindExecutorService">
				      <null/> <!-- The cache is so fast, and CPU bound, that write behind just slows us down on many core systems -->
				    </property>
				    <property name="nodesPerCore" value="1" />
				    <property name="nodeIdentifier" value="local" />
				    <property name="statisticsGatherer" ref="functionCosts" />
				  </bean>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <!-- Maximum execution time (5 minutes) useful to keep going, but not if you're testing large/long running jobs --> 
    <property name="maxJobExecutionTime" value="300000" />
    <property name="statisticsGatherer" ref="jobDispatchStatistics" />
  </bean>
  
  <!-- External interfaces to connect the view processor to the calc nodes -->
  <bean id="calcNodeCacheServer" class="com.opengamma.transport.socket.ServerSocketFudgeConnectionReceiver" init-method="start" destroy-method="stop">
    <constructor-arg>
      <bean class="com.opengamma.engine.view.cache.ViewComputationCacheServer">
        <constructor-arg ref="mainComputationCacheSource" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="standardFudgeContext" />
  </bean>
  <bean id="calcNodeQueryServer" class="com.opengamma.transport.socket.ServerSocketFudgeRequestDispatcher" init-method="start" destroy-method="stop">
    <constructor-arg ref="mainViewProcessorQueryReceiver" />
    <constructor-arg ref="standardFudgeContext" />
  </bean>
  <bean id="calcNodeJobServer" class="com.opengamma.transport.socket.ServerSocketFudgeConnectionReceiver" init-method="start" destroy-method="stop">
    <constructor-arg ref="standardFudgeContext" />
    <constructor-arg>
      <bean class="com.opengamma.engine.view.calcnode.RemoteNodeServer">
        <constructor-arg ref="mainComputationJobDispatcher" />
        <constructor-arg>
          <bean factory-bean="mainComputationCacheSource" factory-method="getIdentifierMap" />
        </constructor-arg>
        <constructor-arg ref="functionCosts" />
        <constructor-arg ref="mainFunctionCompilationContext" />
      </bean>
    </constructor-arg>
  </bean>
  <bean id="mainCalcNodeSocketConfiguration" class="com.opengamma.engine.view.calcnode.CalcNodeSocketConfiguration">
    <property name="cacheServer" ref="calcNodeCacheServer" />
    <property name="queryServer" ref="calcNodeQueryServer" />
    <property name="jobServer" ref="calcNodeJobServer" />
  </bean>
  
  <!-- Demo View Processor -->
  <bean id="graphExecutionStatistics" class="com.opengamma.engine.view.calc.stats.TotallingGraphStatisticsGathererProvider" />
  <bean id="graphExecutor" class="com.opengamma.engine.view.calc.MultipleNodeExecutorFactory">
    <property name="minimumJobItems" value="5" />
    <property name="maximumJobItems" value="1000" />
    <property name="minimumJobCost" value="10000000" />
    <property name="maximumJobCost" value="10000000000" />
    <property name="functionCosts" ref="functionCosts" />
  </bean>
  <bean id="viewResultListenerFactory" class="com.opengamma.masterdb.batch.BatchDbViewResultListenerFactory">
    <property name="batchRunMaster" ref="dbBatchMaster" />
  </bean>
  <bean id="graphExecutorTuner" class="com.opengamma.engine.view.calc.MultipleNodeExecutorTuner">
    <constructor-arg ref="graphExecutor" />
    <property name="jobDispatcher" ref="mainComputationJobDispatcher" />
    <property name="jobDispatchStatistics" ref="jobDispatchStatistics" />
    <property name="graphExecutionStatistics" ref="graphExecutionStatistics" />
  </bean>
  <bean id="mainViewProcessor" class="com.opengamma.engine.view.ViewProcessorFactoryBean">
    <property name="name" value="main" />
    <property name="configSource" ref="combinedViewDefinitionRepository" />
    <property name="liveMarketDataSourceRegistry" ref="standardLiveMarketDataSourceRegistry" />
    <property name="securitySource" ref="combinedSecuritySource" />
    <property name="positionSource" ref="combinedPositionSource" />
    <property name="functionCompilationService" ref="mainCompiledFunctionService" />
    <property name="functionResolver" ref="mainFunctionResolver" />
    <property name="functionExclusionGroups" ref="mainFunctionExclusionGroups" />
    <property name="marketDataProviderResolver" ref="standardMarketDataProviderResolver" />
    <property name="computationCacheSource" ref="mainComputationCacheSource" />
    <property name="computationJobDispatcher" ref="mainComputationJobDispatcher" />
    <property name="viewProcessorQueryReceiver" ref="mainViewProcessorQueryReceiver" />
    <property name="dependencyGraphExecutorFactory" ref="graphExecutor" />
    <property name="graphExecutionStatistics" ref="graphExecutionStatistics" />
    <property name="viewPermissionProvider">
      <bean class="com.opengamma.engine.view.permission.DefaultViewPermissionProvider" />
    </property>
    <property name="viewResultListenerFactory" ref="viewResultListenerFactory" />
    <property name="overrideOperationCompiler" ref="mainOverrideOperationCompiler" />
  </bean>
  
  <bean id="viewProcessorManager" class="com.opengamma.financial.view.ViewProcessorManager" init-method="start">
    <property name="viewProcessor" ref="mainViewProcessor" />
    <property name="masters">
      <list>
        <ref bean="sharedConfigSource" />
        <ref bean="userInterpolatedYieldCurveDefinitionSource" />
        <bean class="com.opengamma.financial.config.ConfigSourceChangeProvider">
          <constructor-arg ref="sharedConfigSource" />
        </bean>
        <bean class=" com.opengamma.financial.timeseries.HistoricalTimeSeriesSourceChangeProvider">
          <constructor-arg ref="sharedHistoricalTimeSeriesSource" />
        </bean>
      </list>
    </property>
    <property name="watchSetProviders">
      <set>
        <bean class="com.opengamma.financial.view.ConfigDbOverrideWatchSetProvider">
          <constructor-arg value="${opengamma.config.db.configmaster.scheme}" />
          <constructor-arg ref="dbConfigMaster" />
          <constructor-arg>
            <set>
              <value>UserCurves</value>
            </set>
          </constructor-arg>
        </bean>
      </set>
    </property>
  </bean>
  
  <!-- Code fragment needed for work on ENG-199 & ENG-200 only -->
  <!--
  <bean id="tuner" class="com.opengamma.integration.server.MultipleNodeExecutorTuner">
    <property name="executorFactory" ref="graphExecutor" />
    <property name="graphStatistics" ref="graphExecutionStatistics" />
    <property name="nodeStatistics" ref="jobDispatchStatistics" />
    <property name="minimumJobCostLowerLimit" value="1" />
    <property name="minimumJobCostUpperLimit" value="100000000" />
  </bean>
  -->

  <!-- ============================================================================== -->
  <!-- Portfolio aggregators -->
  <bean id="mainPortfolioAggregationFunctions" class="com.opengamma.financial.aggregation.PortfolioAggregationFunctions">
   <constructor-arg>
    <bean class="org.springframework.beans.factory.config.ListFactoryBean">
     <property name="sourceList">
      <list>
        <!-- TODO: shared aggregation function config -->
        <bean class="com.opengamma.financial.aggregation.AssetClassAggregationFunction">
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.CurrencyAggregationFunction" />
        <bean class="com.opengamma.financial.aggregation.DetailedAssetClassAggregationFunction" />
        <bean class="com.opengamma.financial.aggregation.RegionAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg ref="sharedRegionSource" />
          <constructor-arg ref="sharedExchangeSource" />
          <constructor-arg value="false" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.UnderlyingAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg value="BLOOMBERG_TICKER" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.GICSAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg value="SECTOR" />
          <constructor-arg value="false" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.GICSAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg value="INDUSTRY_GROUP" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.GICSAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg value="INDUSTRY" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.GICSAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg value="SUB_INDUSTRY" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.EquityBetaAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg ref="sharedHistoricalTimeSeriesSource" />
          <constructor-arg value="false" />
          <constructor-arg value="true" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.CurrentMarketCapAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg ref="sharedHistoricalTimeSeriesSource" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.LiquidityAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg ref="sharedHistoricalTimeSeriesSource" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.LongShortAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
          <constructor-arg value="false" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.StrikeAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
        </bean>
        <bean class="com.opengamma.financial.aggregation.ExpiryAggregationFunction">
          <constructor-arg ref="combinedSecuritySource" />
        </bean>
      </list>
     </property>
    </bean>
   </constructor-arg>
  </bean>

  <!-- ============================================================================== -->
  <!-- JMX instrumentation -->
  <bean id="standardMBeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
    <property name="locateExistingServerIfPossible" value="true" />
  </bean>
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="net.sf.ehcache.management.ManagementService.registerMBeans"/>
    <property name="arguments">
      <list>
        <ref bean="standardCacheManager" />
        <ref bean="standardMBeanServer" />
        <value>true</value>
        <value>true</value>
        <value>true</value>
        <value>true</value>
      </list>
    </property>
  </bean>
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="com.opengamma.engine.view.calc.jmx.MultipleNodeExecutor.registerMBeans" />
    <property name="arguments">
      <list>
        <ref bean="graphExecutor" />
        <ref bean="standardMBeanServer" />
      </list>
    </property>
  </bean>
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="com.opengamma.engine.management.ManagementService.registerMBeans" />
    <property name="arguments">
      <list>
        <ref bean="mainViewProcessor" />
        <ref bean="graphExecutionStatistics" />
        <ref bean="standardMBeanServer" />
      </list>
    </property>
  </bean>

  <!-- ============================================================================== -->
  <!-- Anything that needs regular scheduling -->
  <bean id="scheduler" class="org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean">
    <property name="scheduledExecutorTasks">
      <list>
        <bean class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
          <property name="runnable" ref="graphExecutorTuner" />
          <property name="period" value="5000" />
          <property name="fixedRate" value="false" />
        </bean>
        <bean class="org.springframework.scheduling.concurrent.ScheduledExecutorTask">
          <property name="runnable">
            <bean factory-bean="functionCosts" factory-method="createPersistenceWriter" />
          </property>
          <property name="period" value="60000" />
          <property name="fixedRate" value="false" />
        </bean>
      </list>
    </property>
  </bean>
</beans>

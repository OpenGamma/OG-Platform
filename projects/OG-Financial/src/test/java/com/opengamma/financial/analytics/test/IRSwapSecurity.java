/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.test;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.fudgemsg.FudgeMsg;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.financial.security.swap.SwapSecurity;

/**
 * 
 */
@BeanDefinition
public final class IRSwapSecurity implements ImmutableBean {
  
  @PropertyDefinition(validate = "notNull")
  private final SwapSecurity _swapSecurity;
  
  @PropertyDefinition(validate = "notNull")
  private final FudgeMsg _rawInput;
  
  public static IRSwapSecurity of(SwapSecurity swapSecurity, FudgeMsg rawInput) {
    return new IRSwapSecurity(swapSecurity, rawInput);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IRSwapSecurity}.
   * @return the meta-bean, not null
   */
  public static IRSwapSecurity.Meta meta() {
    return IRSwapSecurity.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IRSwapSecurity.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static IRSwapSecurity.Builder builder() {
    return new IRSwapSecurity.Builder();
  }

  private IRSwapSecurity(
      SwapSecurity swapSecurity,
      FudgeMsg rawInput) {
    JodaBeanUtils.notNull(swapSecurity, "swapSecurity");
    JodaBeanUtils.notNull(rawInput, "rawInput");
    this._swapSecurity = swapSecurity;
    this._rawInput = rawInput;
  }

  @Override
  public IRSwapSecurity.Meta metaBean() {
    return IRSwapSecurity.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the swapSecurity.
   * @return the value of the property, not null
   */
  public SwapSecurity getSwapSecurity() {
    return _swapSecurity;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rawInput.
   * @return the value of the property, not null
   */
  public FudgeMsg getRawInput() {
    return _rawInput;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public IRSwapSecurity clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IRSwapSecurity other = (IRSwapSecurity) obj;
      return JodaBeanUtils.equal(getSwapSecurity(), other.getSwapSecurity()) &&
          JodaBeanUtils.equal(getRawInput(), other.getRawInput());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getSwapSecurity());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRawInput());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("IRSwapSecurity{");
    buf.append("swapSecurity").append('=').append(getSwapSecurity()).append(',').append(' ');
    buf.append("rawInput").append('=').append(JodaBeanUtils.toString(getRawInput()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IRSwapSecurity}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code swapSecurity} property.
     */
    private final MetaProperty<SwapSecurity> _swapSecurity = DirectMetaProperty.ofImmutable(
        this, "swapSecurity", IRSwapSecurity.class, SwapSecurity.class);
    /**
     * The meta-property for the {@code rawInput} property.
     */
    private final MetaProperty<FudgeMsg> _rawInput = DirectMetaProperty.ofImmutable(
        this, "rawInput", IRSwapSecurity.class, FudgeMsg.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "swapSecurity",
        "rawInput");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1431153139:  // swapSecurity
          return _swapSecurity;
        case 483100802:  // rawInput
          return _rawInput;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public IRSwapSecurity.Builder builder() {
      return new IRSwapSecurity.Builder();
    }

    @Override
    public Class<? extends IRSwapSecurity> beanType() {
      return IRSwapSecurity.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code swapSecurity} property.
     * @return the meta-property, not null
     */
    public MetaProperty<SwapSecurity> swapSecurity() {
      return _swapSecurity;
    }

    /**
     * The meta-property for the {@code rawInput} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FudgeMsg> rawInput() {
      return _rawInput;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1431153139:  // swapSecurity
          return ((IRSwapSecurity) bean).getSwapSecurity();
        case 483100802:  // rawInput
          return ((IRSwapSecurity) bean).getRawInput();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IRSwapSecurity}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<IRSwapSecurity> {

    private SwapSecurity _swapSecurity;
    private FudgeMsg _rawInput;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(IRSwapSecurity beanToCopy) {
      this._swapSecurity = beanToCopy.getSwapSecurity();
      this._rawInput = beanToCopy.getRawInput();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1431153139:  // swapSecurity
          return _swapSecurity;
        case 483100802:  // rawInput
          return _rawInput;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1431153139:  // swapSecurity
          this._swapSecurity = (SwapSecurity) newValue;
          break;
        case 483100802:  // rawInput
          this._rawInput = (FudgeMsg) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public IRSwapSecurity build() {
      return new IRSwapSecurity(
          _swapSecurity,
          _rawInput);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code swapSecurity} property in the builder.
     * @param swapSecurity  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder swapSecurity(SwapSecurity swapSecurity) {
      JodaBeanUtils.notNull(swapSecurity, "swapSecurity");
      this._swapSecurity = swapSecurity;
      return this;
    }

    /**
     * Sets the {@code rawInput} property in the builder.
     * @param rawInput  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rawInput(FudgeMsg rawInput) {
      JodaBeanUtils.notNull(rawInput, "rawInput");
      this._rawInput = rawInput;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("IRSwapSecurity.Builder{");
      buf.append("swapSecurity").append('=').append(JodaBeanUtils.toString(_swapSecurity)).append(',').append(' ');
      buf.append("rawInput").append('=').append(JodaBeanUtils.toString(_rawInput));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

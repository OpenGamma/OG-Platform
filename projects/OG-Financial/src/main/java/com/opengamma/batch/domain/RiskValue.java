/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.batch.domain;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.Instant;

/**
 * Data model for a risk value.
 */
@BeanDefinition
public class RiskValue extends DirectBean {

  @PropertyDefinition
  private long _id;

  @PropertyDefinition
  private long _calculationConfigurationId;

  @PropertyDefinition
  private String _name;

  @PropertyDefinition
  private long _valueSpecificationId;

  @PropertyDefinition
  private long _functionUniqueId;

  @PropertyDefinition
  private long _computationTargetId;

  @PropertyDefinition
  private long _runId;

  @PropertyDefinition
  private double _value;

  @PropertyDefinition
  private Instant _evalInstant;

  @PropertyDefinition
  private long _computeNodeId;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code RiskValue}.
   * @return the meta-bean, not null
   */
  public static RiskValue.Meta meta() {
    return RiskValue.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(RiskValue.Meta.INSTANCE);
  }

  @Override
  public RiskValue.Meta metaBean() {
    return RiskValue.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id.
   * @return the value of the property
   */
  public long getId() {
    return _id;
  }

  /**
   * Sets the id.
   * @param id  the new value of the property
   */
  public void setId(long id) {
    this._id = id;
  }

  /**
   * Gets the the {@code id} property.
   * @return the property, not null
   */
  public final Property<Long> id() {
    return metaBean().id().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the calculationConfigurationId.
   * @return the value of the property
   */
  public long getCalculationConfigurationId() {
    return _calculationConfigurationId;
  }

  /**
   * Sets the calculationConfigurationId.
   * @param calculationConfigurationId  the new value of the property
   */
  public void setCalculationConfigurationId(long calculationConfigurationId) {
    this._calculationConfigurationId = calculationConfigurationId;
  }

  /**
   * Gets the the {@code calculationConfigurationId} property.
   * @return the property, not null
   */
  public final Property<Long> calculationConfigurationId() {
    return metaBean().calculationConfigurationId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Sets the name.
   * @param name  the new value of the property
   */
  public void setName(String name) {
    this._name = name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the valueSpecificationId.
   * @return the value of the property
   */
  public long getValueSpecificationId() {
    return _valueSpecificationId;
  }

  /**
   * Sets the valueSpecificationId.
   * @param valueSpecificationId  the new value of the property
   */
  public void setValueSpecificationId(long valueSpecificationId) {
    this._valueSpecificationId = valueSpecificationId;
  }

  /**
   * Gets the the {@code valueSpecificationId} property.
   * @return the property, not null
   */
  public final Property<Long> valueSpecificationId() {
    return metaBean().valueSpecificationId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the functionUniqueId.
   * @return the value of the property
   */
  public long getFunctionUniqueId() {
    return _functionUniqueId;
  }

  /**
   * Sets the functionUniqueId.
   * @param functionUniqueId  the new value of the property
   */
  public void setFunctionUniqueId(long functionUniqueId) {
    this._functionUniqueId = functionUniqueId;
  }

  /**
   * Gets the the {@code functionUniqueId} property.
   * @return the property, not null
   */
  public final Property<Long> functionUniqueId() {
    return metaBean().functionUniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the computationTargetId.
   * @return the value of the property
   */
  public long getComputationTargetId() {
    return _computationTargetId;
  }

  /**
   * Sets the computationTargetId.
   * @param computationTargetId  the new value of the property
   */
  public void setComputationTargetId(long computationTargetId) {
    this._computationTargetId = computationTargetId;
  }

  /**
   * Gets the the {@code computationTargetId} property.
   * @return the property, not null
   */
  public final Property<Long> computationTargetId() {
    return metaBean().computationTargetId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the runId.
   * @return the value of the property
   */
  public long getRunId() {
    return _runId;
  }

  /**
   * Sets the runId.
   * @param runId  the new value of the property
   */
  public void setRunId(long runId) {
    this._runId = runId;
  }

  /**
   * Gets the the {@code runId} property.
   * @return the property, not null
   */
  public final Property<Long> runId() {
    return metaBean().runId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the value.
   * @return the value of the property
   */
  public double getValue() {
    return _value;
  }

  /**
   * Sets the value.
   * @param value  the new value of the property
   */
  public void setValue(double value) {
    this._value = value;
  }

  /**
   * Gets the the {@code value} property.
   * @return the property, not null
   */
  public final Property<Double> value() {
    return metaBean().value().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the evalInstant.
   * @return the value of the property
   */
  public Instant getEvalInstant() {
    return _evalInstant;
  }

  /**
   * Sets the evalInstant.
   * @param evalInstant  the new value of the property
   */
  public void setEvalInstant(Instant evalInstant) {
    this._evalInstant = evalInstant;
  }

  /**
   * Gets the the {@code evalInstant} property.
   * @return the property, not null
   */
  public final Property<Instant> evalInstant() {
    return metaBean().evalInstant().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the computeNodeId.
   * @return the value of the property
   */
  public long getComputeNodeId() {
    return _computeNodeId;
  }

  /**
   * Sets the computeNodeId.
   * @param computeNodeId  the new value of the property
   */
  public void setComputeNodeId(long computeNodeId) {
    this._computeNodeId = computeNodeId;
  }

  /**
   * Gets the the {@code computeNodeId} property.
   * @return the property, not null
   */
  public final Property<Long> computeNodeId() {
    return metaBean().computeNodeId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public RiskValue clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RiskValue other = (RiskValue) obj;
      return (getId() == other.getId()) &&
          (getCalculationConfigurationId() == other.getCalculationConfigurationId()) &&
          JodaBeanUtils.equal(getName(), other.getName()) &&
          (getValueSpecificationId() == other.getValueSpecificationId()) &&
          (getFunctionUniqueId() == other.getFunctionUniqueId()) &&
          (getComputationTargetId() == other.getComputationTargetId()) &&
          (getRunId() == other.getRunId()) &&
          JodaBeanUtils.equal(getValue(), other.getValue()) &&
          JodaBeanUtils.equal(getEvalInstant(), other.getEvalInstant()) &&
          (getComputeNodeId() == other.getComputeNodeId());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCalculationConfigurationId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getValueSpecificationId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFunctionUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getComputationTargetId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRunId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getValue());
    hash += hash * 31 + JodaBeanUtils.hashCode(getEvalInstant());
    hash += hash * 31 + JodaBeanUtils.hashCode(getComputeNodeId());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(352);
    buf.append("RiskValue{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
    buf.append("calculationConfigurationId").append('=').append(JodaBeanUtils.toString(getCalculationConfigurationId())).append(',').append(' ');
    buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
    buf.append("valueSpecificationId").append('=').append(JodaBeanUtils.toString(getValueSpecificationId())).append(',').append(' ');
    buf.append("functionUniqueId").append('=').append(JodaBeanUtils.toString(getFunctionUniqueId())).append(',').append(' ');
    buf.append("computationTargetId").append('=').append(JodaBeanUtils.toString(getComputationTargetId())).append(',').append(' ');
    buf.append("runId").append('=').append(JodaBeanUtils.toString(getRunId())).append(',').append(' ');
    buf.append("value").append('=').append(JodaBeanUtils.toString(getValue())).append(',').append(' ');
    buf.append("evalInstant").append('=').append(JodaBeanUtils.toString(getEvalInstant())).append(',').append(' ');
    buf.append("computeNodeId").append('=').append(JodaBeanUtils.toString(getComputeNodeId())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RiskValue}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<Long> _id = DirectMetaProperty.ofReadWrite(
        this, "id", RiskValue.class, Long.TYPE);
    /**
     * The meta-property for the {@code calculationConfigurationId} property.
     */
    private final MetaProperty<Long> _calculationConfigurationId = DirectMetaProperty.ofReadWrite(
        this, "calculationConfigurationId", RiskValue.class, Long.TYPE);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", RiskValue.class, String.class);
    /**
     * The meta-property for the {@code valueSpecificationId} property.
     */
    private final MetaProperty<Long> _valueSpecificationId = DirectMetaProperty.ofReadWrite(
        this, "valueSpecificationId", RiskValue.class, Long.TYPE);
    /**
     * The meta-property for the {@code functionUniqueId} property.
     */
    private final MetaProperty<Long> _functionUniqueId = DirectMetaProperty.ofReadWrite(
        this, "functionUniqueId", RiskValue.class, Long.TYPE);
    /**
     * The meta-property for the {@code computationTargetId} property.
     */
    private final MetaProperty<Long> _computationTargetId = DirectMetaProperty.ofReadWrite(
        this, "computationTargetId", RiskValue.class, Long.TYPE);
    /**
     * The meta-property for the {@code runId} property.
     */
    private final MetaProperty<Long> _runId = DirectMetaProperty.ofReadWrite(
        this, "runId", RiskValue.class, Long.TYPE);
    /**
     * The meta-property for the {@code value} property.
     */
    private final MetaProperty<Double> _value = DirectMetaProperty.ofReadWrite(
        this, "value", RiskValue.class, Double.TYPE);
    /**
     * The meta-property for the {@code evalInstant} property.
     */
    private final MetaProperty<Instant> _evalInstant = DirectMetaProperty.ofReadWrite(
        this, "evalInstant", RiskValue.class, Instant.class);
    /**
     * The meta-property for the {@code computeNodeId} property.
     */
    private final MetaProperty<Long> _computeNodeId = DirectMetaProperty.ofReadWrite(
        this, "computeNodeId", RiskValue.class, Long.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id",
        "calculationConfigurationId",
        "name",
        "valueSpecificationId",
        "functionUniqueId",
        "computationTargetId",
        "runId",
        "value",
        "evalInstant",
        "computeNodeId");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return _id;
        case 1329751720:  // calculationConfigurationId
          return _calculationConfigurationId;
        case 3373707:  // name
          return _name;
        case -1127019571:  // valueSpecificationId
          return _valueSpecificationId;
        case 1563911364:  // functionUniqueId
          return _functionUniqueId;
        case -1362849421:  // computationTargetId
          return _computationTargetId;
        case 108875014:  // runId
          return _runId;
        case 111972721:  // value
          return _value;
        case 820536741:  // evalInstant
          return _evalInstant;
        case 398290388:  // computeNodeId
          return _computeNodeId;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends RiskValue> builder() {
      return new DirectBeanBuilder<RiskValue>(new RiskValue());
    }

    @Override
    public Class<? extends RiskValue> beanType() {
      return RiskValue.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code calculationConfigurationId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> calculationConfigurationId() {
      return _calculationConfigurationId;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code valueSpecificationId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> valueSpecificationId() {
      return _valueSpecificationId;
    }

    /**
     * The meta-property for the {@code functionUniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> functionUniqueId() {
      return _functionUniqueId;
    }

    /**
     * The meta-property for the {@code computationTargetId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> computationTargetId() {
      return _computationTargetId;
    }

    /**
     * The meta-property for the {@code runId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> runId() {
      return _runId;
    }

    /**
     * The meta-property for the {@code value} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> value() {
      return _value;
    }

    /**
     * The meta-property for the {@code evalInstant} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Instant> evalInstant() {
      return _evalInstant;
    }

    /**
     * The meta-property for the {@code computeNodeId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> computeNodeId() {
      return _computeNodeId;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return ((RiskValue) bean).getId();
        case 1329751720:  // calculationConfigurationId
          return ((RiskValue) bean).getCalculationConfigurationId();
        case 3373707:  // name
          return ((RiskValue) bean).getName();
        case -1127019571:  // valueSpecificationId
          return ((RiskValue) bean).getValueSpecificationId();
        case 1563911364:  // functionUniqueId
          return ((RiskValue) bean).getFunctionUniqueId();
        case -1362849421:  // computationTargetId
          return ((RiskValue) bean).getComputationTargetId();
        case 108875014:  // runId
          return ((RiskValue) bean).getRunId();
        case 111972721:  // value
          return ((RiskValue) bean).getValue();
        case 820536741:  // evalInstant
          return ((RiskValue) bean).getEvalInstant();
        case 398290388:  // computeNodeId
          return ((RiskValue) bean).getComputeNodeId();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          ((RiskValue) bean).setId((Long) newValue);
          return;
        case 1329751720:  // calculationConfigurationId
          ((RiskValue) bean).setCalculationConfigurationId((Long) newValue);
          return;
        case 3373707:  // name
          ((RiskValue) bean).setName((String) newValue);
          return;
        case -1127019571:  // valueSpecificationId
          ((RiskValue) bean).setValueSpecificationId((Long) newValue);
          return;
        case 1563911364:  // functionUniqueId
          ((RiskValue) bean).setFunctionUniqueId((Long) newValue);
          return;
        case -1362849421:  // computationTargetId
          ((RiskValue) bean).setComputationTargetId((Long) newValue);
          return;
        case 108875014:  // runId
          ((RiskValue) bean).setRunId((Long) newValue);
          return;
        case 111972721:  // value
          ((RiskValue) bean).setValue((Double) newValue);
          return;
        case 820536741:  // evalInstant
          ((RiskValue) bean).setEvalInstant((Instant) newValue);
          return;
        case 398290388:  // computeNodeId
          ((RiskValue) bean).setComputeNodeId((Long) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

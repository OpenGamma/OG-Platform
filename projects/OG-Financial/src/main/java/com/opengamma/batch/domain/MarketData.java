/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.batch.domain;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.batch.BatchMaster;
import com.opengamma.id.ObjectId;
import com.opengamma.id.ObjectIdentifiable;
import com.opengamma.id.UniqueId;

/**
 * Data model for market data.
 */
@BeanDefinition
public class MarketData extends DirectBean implements ObjectIdentifiable {

  @PropertyDefinition
  private long _id;

  @PropertyDefinition
  private String _baseUidScheme;

  @PropertyDefinition
  private String _baseUidValue;

  @PropertyDefinition
  private String _baseUidVersion;

  /**
   * Gets the unique id of the base market data.
   * @return the value of the base market data.
   */
  public UniqueId getBaseUid() {
    return UniqueId.of(getBaseUidScheme(), getBaseUidValue(), getBaseUidVersion());
  }

  /**
   * Sets the unique id of the base market data
   * @param baseUid  the new base market data.
   */
  public void setBaseUid(UniqueId baseUid) {
    setBaseUidScheme(baseUid.getScheme());
    setBaseUidValue(baseUid.getValue());
    setBaseUidVersion(baseUid.getVersion());
  }

  @Override
  public ObjectId getObjectId() {
    return ObjectId.of(BatchMaster.BATCH_IDENTIFIER_SCHEME, Long.toString(getId()));
  }

  public MarketData() {
  }

  public MarketData(UniqueId baseUid) {
    setBaseUid(baseUid);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MarketData}.
   * @return the meta-bean, not null
   */
  public static MarketData.Meta meta() {
    return MarketData.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(MarketData.Meta.INSTANCE);
  }

  @Override
  public MarketData.Meta metaBean() {
    return MarketData.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id.
   * @return the value of the property
   */
  public long getId() {
    return _id;
  }

  /**
   * Sets the id.
   * @param id  the new value of the property
   */
  public void setId(long id) {
    this._id = id;
  }

  /**
   * Gets the the {@code id} property.
   * @return the property, not null
   */
  public final Property<Long> id() {
    return metaBean().id().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the baseUidScheme.
   * @return the value of the property
   */
  public String getBaseUidScheme() {
    return _baseUidScheme;
  }

  /**
   * Sets the baseUidScheme.
   * @param baseUidScheme  the new value of the property
   */
  public void setBaseUidScheme(String baseUidScheme) {
    this._baseUidScheme = baseUidScheme;
  }

  /**
   * Gets the the {@code baseUidScheme} property.
   * @return the property, not null
   */
  public final Property<String> baseUidScheme() {
    return metaBean().baseUidScheme().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the baseUidValue.
   * @return the value of the property
   */
  public String getBaseUidValue() {
    return _baseUidValue;
  }

  /**
   * Sets the baseUidValue.
   * @param baseUidValue  the new value of the property
   */
  public void setBaseUidValue(String baseUidValue) {
    this._baseUidValue = baseUidValue;
  }

  /**
   * Gets the the {@code baseUidValue} property.
   * @return the property, not null
   */
  public final Property<String> baseUidValue() {
    return metaBean().baseUidValue().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the baseUidVersion.
   * @return the value of the property
   */
  public String getBaseUidVersion() {
    return _baseUidVersion;
  }

  /**
   * Sets the baseUidVersion.
   * @param baseUidVersion  the new value of the property
   */
  public void setBaseUidVersion(String baseUidVersion) {
    this._baseUidVersion = baseUidVersion;
  }

  /**
   * Gets the the {@code baseUidVersion} property.
   * @return the property, not null
   */
  public final Property<String> baseUidVersion() {
    return metaBean().baseUidVersion().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public MarketData clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MarketData other = (MarketData) obj;
      return (getId() == other.getId()) &&
          JodaBeanUtils.equal(getBaseUidScheme(), other.getBaseUidScheme()) &&
          JodaBeanUtils.equal(getBaseUidValue(), other.getBaseUidValue()) &&
          JodaBeanUtils.equal(getBaseUidVersion(), other.getBaseUidVersion());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getBaseUidScheme());
    hash += hash * 31 + JodaBeanUtils.hashCode(getBaseUidValue());
    hash += hash * 31 + JodaBeanUtils.hashCode(getBaseUidVersion());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("MarketData{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
    buf.append("baseUidScheme").append('=').append(JodaBeanUtils.toString(getBaseUidScheme())).append(',').append(' ');
    buf.append("baseUidValue").append('=').append(JodaBeanUtils.toString(getBaseUidValue())).append(',').append(' ');
    buf.append("baseUidVersion").append('=').append(JodaBeanUtils.toString(getBaseUidVersion())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MarketData}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<Long> _id = DirectMetaProperty.ofReadWrite(
        this, "id", MarketData.class, Long.TYPE);
    /**
     * The meta-property for the {@code baseUidScheme} property.
     */
    private final MetaProperty<String> _baseUidScheme = DirectMetaProperty.ofReadWrite(
        this, "baseUidScheme", MarketData.class, String.class);
    /**
     * The meta-property for the {@code baseUidValue} property.
     */
    private final MetaProperty<String> _baseUidValue = DirectMetaProperty.ofReadWrite(
        this, "baseUidValue", MarketData.class, String.class);
    /**
     * The meta-property for the {@code baseUidVersion} property.
     */
    private final MetaProperty<String> _baseUidVersion = DirectMetaProperty.ofReadWrite(
        this, "baseUidVersion", MarketData.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id",
        "baseUidScheme",
        "baseUidValue",
        "baseUidVersion");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return _id;
        case -1887986108:  // baseUidScheme
          return _baseUidScheme;
        case 2020022514:  // baseUidValue
          return _baseUidValue;
        case 36423705:  // baseUidVersion
          return _baseUidVersion;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends MarketData> builder() {
      return new DirectBeanBuilder<MarketData>(new MarketData());
    }

    @Override
    public Class<? extends MarketData> beanType() {
      return MarketData.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Long> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code baseUidScheme} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> baseUidScheme() {
      return _baseUidScheme;
    }

    /**
     * The meta-property for the {@code baseUidValue} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> baseUidValue() {
      return _baseUidValue;
    }

    /**
     * The meta-property for the {@code baseUidVersion} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> baseUidVersion() {
      return _baseUidVersion;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return ((MarketData) bean).getId();
        case -1887986108:  // baseUidScheme
          return ((MarketData) bean).getBaseUidScheme();
        case 2020022514:  // baseUidValue
          return ((MarketData) bean).getBaseUidValue();
        case 36423705:  // baseUidVersion
          return ((MarketData) bean).getBaseUidVersion();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          ((MarketData) bean).setId((Long) newValue);
          return;
        case -1887986108:  // baseUidScheme
          ((MarketData) bean).setBaseUidScheme((String) newValue);
          return;
        case 2020022514:  // baseUidValue
          ((MarketData) bean).setBaseUidValue((String) newValue);
          return;
        case 36423705:  // baseUidVersion
          ((MarketData) bean).setBaseUidVersion((String) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.batch.domain;


import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Data model for a risk run property.
 */
@BeanDefinition
public class RiskRunProperty extends DirectBean {

  @PropertyDefinition
  private int _id;

  @PropertyDefinition
  private RiskRun _riskRun;

  @PropertyDefinition
  private String _propertyKey;

  @PropertyDefinition
  private String _propertyValue;

  public RiskRunProperty() {
  }

  public RiskRunProperty(String propertyKey, String propertyValue) {
    this._propertyKey = propertyKey;
    this._propertyValue = propertyValue;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code RiskRunProperty}.
   * @return the meta-bean, not null
   */
  public static RiskRunProperty.Meta meta() {
    return RiskRunProperty.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(RiskRunProperty.Meta.INSTANCE);
  }

  @Override
  public RiskRunProperty.Meta metaBean() {
    return RiskRunProperty.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id.
   * @return the value of the property
   */
  public int getId() {
    return _id;
  }

  /**
   * Sets the id.
   * @param id  the new value of the property
   */
  public void setId(int id) {
    this._id = id;
  }

  /**
   * Gets the the {@code id} property.
   * @return the property, not null
   */
  public final Property<Integer> id() {
    return metaBean().id().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the riskRun.
   * @return the value of the property
   */
  public RiskRun getRiskRun() {
    return _riskRun;
  }

  /**
   * Sets the riskRun.
   * @param riskRun  the new value of the property
   */
  public void setRiskRun(RiskRun riskRun) {
    this._riskRun = riskRun;
  }

  /**
   * Gets the the {@code riskRun} property.
   * @return the property, not null
   */
  public final Property<RiskRun> riskRun() {
    return metaBean().riskRun().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the propertyKey.
   * @return the value of the property
   */
  public String getPropertyKey() {
    return _propertyKey;
  }

  /**
   * Sets the propertyKey.
   * @param propertyKey  the new value of the property
   */
  public void setPropertyKey(String propertyKey) {
    this._propertyKey = propertyKey;
  }

  /**
   * Gets the the {@code propertyKey} property.
   * @return the property, not null
   */
  public final Property<String> propertyKey() {
    return metaBean().propertyKey().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the propertyValue.
   * @return the value of the property
   */
  public String getPropertyValue() {
    return _propertyValue;
  }

  /**
   * Sets the propertyValue.
   * @param propertyValue  the new value of the property
   */
  public void setPropertyValue(String propertyValue) {
    this._propertyValue = propertyValue;
  }

  /**
   * Gets the the {@code propertyValue} property.
   * @return the property, not null
   */
  public final Property<String> propertyValue() {
    return metaBean().propertyValue().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public RiskRunProperty clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      RiskRunProperty other = (RiskRunProperty) obj;
      return (getId() == other.getId()) &&
          JodaBeanUtils.equal(getRiskRun(), other.getRiskRun()) &&
          JodaBeanUtils.equal(getPropertyKey(), other.getPropertyKey()) &&
          JodaBeanUtils.equal(getPropertyValue(), other.getPropertyValue());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRiskRun());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPropertyKey());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPropertyValue());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("RiskRunProperty{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
    buf.append("riskRun").append('=').append(JodaBeanUtils.toString(getRiskRun())).append(',').append(' ');
    buf.append("propertyKey").append('=').append(JodaBeanUtils.toString(getPropertyKey())).append(',').append(' ');
    buf.append("propertyValue").append('=').append(JodaBeanUtils.toString(getPropertyValue())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code RiskRunProperty}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<Integer> _id = DirectMetaProperty.ofReadWrite(
        this, "id", RiskRunProperty.class, Integer.TYPE);
    /**
     * The meta-property for the {@code riskRun} property.
     */
    private final MetaProperty<RiskRun> _riskRun = DirectMetaProperty.ofReadWrite(
        this, "riskRun", RiskRunProperty.class, RiskRun.class);
    /**
     * The meta-property for the {@code propertyKey} property.
     */
    private final MetaProperty<String> _propertyKey = DirectMetaProperty.ofReadWrite(
        this, "propertyKey", RiskRunProperty.class, String.class);
    /**
     * The meta-property for the {@code propertyValue} property.
     */
    private final MetaProperty<String> _propertyValue = DirectMetaProperty.ofReadWrite(
        this, "propertyValue", RiskRunProperty.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id",
        "riskRun",
        "propertyKey",
        "propertyValue");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return _id;
        case 1211740476:  // riskRun
          return _riskRun;
        case 1357577290:  // propertyKey
          return _propertyKey;
        case -1028251492:  // propertyValue
          return _propertyValue;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends RiskRunProperty> builder() {
      return new DirectBeanBuilder<RiskRunProperty>(new RiskRunProperty());
    }

    @Override
    public Class<? extends RiskRunProperty> beanType() {
      return RiskRunProperty.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code riskRun} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<RiskRun> riskRun() {
      return _riskRun;
    }

    /**
     * The meta-property for the {@code propertyKey} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> propertyKey() {
      return _propertyKey;
    }

    /**
     * The meta-property for the {@code propertyValue} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> propertyValue() {
      return _propertyValue;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return ((RiskRunProperty) bean).getId();
        case 1211740476:  // riskRun
          return ((RiskRunProperty) bean).getRiskRun();
        case 1357577290:  // propertyKey
          return ((RiskRunProperty) bean).getPropertyKey();
        case -1028251492:  // propertyValue
          return ((RiskRunProperty) bean).getPropertyValue();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          ((RiskRunProperty) bean).setId((Integer) newValue);
          return;
        case 1211740476:  // riskRun
          ((RiskRunProperty) bean).setRiskRun((RiskRun) newValue);
          return;
        case 1357577290:  // propertyKey
          ((RiskRunProperty) bean).setPropertyKey((String) newValue);
          return;
        case -1028251492:  // propertyValue
          ((RiskRunProperty) bean).setPropertyValue((String) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.curve;

import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.core.link.ConventionLink;
import com.opengamma.financial.analytics.ircurve.strips.IsdaYieldCurveNode;
import com.opengamma.financial.convention.IsdaYieldCurveConvention;

/**
 * Defines an ISDA yield curve. This adds two extra fields to the
 * {@link AbstractCurveDefinition} - a set of curve nodes, cash or
 * swaps, and a single convention to apply across the curve and its
 * nodes.
 */
@BeanDefinition
public class IsdaYieldCurveDefinition extends AbstractCurveDefinition {

  private static final long serialVersionUID = 1L;

  /**
   * The curve convention.
   */
  @PropertyDefinition(validate = "notNull")
  private ConventionLink<IsdaYieldCurveConvention> _curveConventionLink;
  
  /**
   * The constituents of the curve.
   */
  @PropertyDefinition(validate = "notNull")
  private SortedSet<IsdaYieldCurveNode> _nodes = new TreeSet<>();
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IsdaYieldCurveDefinition}.
   * @return the meta-bean, not null
   */
  public static IsdaYieldCurveDefinition.Meta meta() {
    return IsdaYieldCurveDefinition.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IsdaYieldCurveDefinition.Meta.INSTANCE);
  }

  @Override
  public IsdaYieldCurveDefinition.Meta metaBean() {
    return IsdaYieldCurveDefinition.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the curve convention.
   * @return the value of the property, not null
   */
  public ConventionLink<IsdaYieldCurveConvention> getCurveConventionLink() {
    return _curveConventionLink;
  }

  /**
   * Sets the curve convention.
   * @param curveConventionLink  the new value of the property, not null
   */
  public void setCurveConventionLink(ConventionLink<IsdaYieldCurveConvention> curveConventionLink) {
    JodaBeanUtils.notNull(curveConventionLink, "curveConventionLink");
    this._curveConventionLink = curveConventionLink;
  }

  /**
   * Gets the the {@code curveConventionLink} property.
   * @return the property, not null
   */
  public final Property<ConventionLink<IsdaYieldCurveConvention>> curveConventionLink() {
    return metaBean().curveConventionLink().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the constituents of the curve.
   * @return the value of the property, not null
   */
  public SortedSet<IsdaYieldCurveNode> getNodes() {
    return _nodes;
  }

  /**
   * Sets the constituents of the curve.
   * @param nodes  the new value of the property, not null
   */
  public void setNodes(SortedSet<IsdaYieldCurveNode> nodes) {
    JodaBeanUtils.notNull(nodes, "nodes");
    this._nodes = nodes;
  }

  /**
   * Gets the the {@code nodes} property.
   * @return the property, not null
   */
  public final Property<SortedSet<IsdaYieldCurveNode>> nodes() {
    return metaBean().nodes().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public IsdaYieldCurveDefinition clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IsdaYieldCurveDefinition other = (IsdaYieldCurveDefinition) obj;
      return JodaBeanUtils.equal(getCurveConventionLink(), other.getCurveConventionLink()) &&
          JodaBeanUtils.equal(getNodes(), other.getNodes()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurveConventionLink());
    hash += hash * 31 + JodaBeanUtils.hashCode(getNodes());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("IsdaYieldCurveDefinition{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("curveConventionLink").append('=').append(JodaBeanUtils.toString(getCurveConventionLink())).append(',').append(' ');
    buf.append("nodes").append('=').append(JodaBeanUtils.toString(getNodes())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IsdaYieldCurveDefinition}.
   */
  public static class Meta extends AbstractCurveDefinition.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code curveConventionLink} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ConventionLink<IsdaYieldCurveConvention>> _curveConventionLink = DirectMetaProperty.ofReadWrite(
        this, "curveConventionLink", IsdaYieldCurveDefinition.class, (Class) ConventionLink.class);
    /**
     * The meta-property for the {@code nodes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<SortedSet<IsdaYieldCurveNode>> _nodes = DirectMetaProperty.ofReadWrite(
        this, "nodes", IsdaYieldCurveDefinition.class, (Class) SortedSet.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "curveConventionLink",
        "nodes");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -837722662:  // curveConventionLink
          return _curveConventionLink;
        case 104993457:  // nodes
          return _nodes;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IsdaYieldCurveDefinition> builder() {
      return new DirectBeanBuilder<IsdaYieldCurveDefinition>(new IsdaYieldCurveDefinition());
    }

    @Override
    public Class<? extends IsdaYieldCurveDefinition> beanType() {
      return IsdaYieldCurveDefinition.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code curveConventionLink} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ConventionLink<IsdaYieldCurveConvention>> curveConventionLink() {
      return _curveConventionLink;
    }

    /**
     * The meta-property for the {@code nodes} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SortedSet<IsdaYieldCurveNode>> nodes() {
      return _nodes;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -837722662:  // curveConventionLink
          return ((IsdaYieldCurveDefinition) bean).getCurveConventionLink();
        case 104993457:  // nodes
          return ((IsdaYieldCurveDefinition) bean).getNodes();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -837722662:  // curveConventionLink
          ((IsdaYieldCurveDefinition) bean).setCurveConventionLink((ConventionLink<IsdaYieldCurveConvention>) newValue);
          return;
        case 104993457:  // nodes
          ((IsdaYieldCurveDefinition) bean).setNodes((SortedSet<IsdaYieldCurveNode>) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((IsdaYieldCurveDefinition) bean)._curveConventionLink, "curveConventionLink");
      JodaBeanUtils.notNull(((IsdaYieldCurveDefinition) bean)._nodes, "nodes");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
